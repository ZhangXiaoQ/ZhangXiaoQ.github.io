import{_ as p,W as c,X as o,Y as n,Z as s,a0 as t,a2 as e,C as i}from"./framework-a9f5de78.js";const l={},u=e('<p>最近不是正好在研究 canal 嘛，刚巧前两天看了一篇关于<strong>解决缓存与数据库一致性问题</strong>的文章，里边提到了一种解决方案是结合 canal 来操作的，所以阿Q就想趁热打铁，手动来实现一下。</p><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h2><p>文中提到的思想是：</p><ul><li>采用<strong>先更新数据库，后删除缓存</strong>的方式来解决并发引发的一致性问题；</li><li>采用<strong>异步重试</strong>的方式来保证“更新数据库、删除缓存”这两步都能执行成功；</li><li>可以采用<strong>订阅变更日志</strong>的方式来清除 Redis 中的缓存；</li></ul><p>基于这种思想，阿Q脑海中搭建了以下架构</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ee69f618f5e450b9a62bc9a150ea7d0~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>APP 从 Redis 中查询信息，将数据的更新写入 MySQL 数据库中；</li><li>Canal 向 MySQL 发送 dump 协议，接收 binlog 推送的数据；</li><li>Canal 将接收到的数据投递给 MQ 消息队列；</li><li>MQ 消息队列消费消息，同时删除 Redis 中对应数据的缓存；</li></ul><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备" aria-hidden="true">#</a> 环境准备</h2>',8),d={href:"https://mp.weixin.qq.com/s?__biz=MzI5MDg2NjEzNA==&mid=2247484053&idx=1&sn=6eec591ceb3980c9b7e93ca2acf738f9&chksm=ec18142cdb6f9d3a340b74c7f1ae392f030ea0b5fad60ab7e822f2eb444a086867f340ec6ef1&token=933180097&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},r={href:"https://mp.weixin.qq.com/s/-KO6fe6bMl0lMFDbdM6pSw",target:"_blank",rel:"noopener noreferrer"},k=e(`<p>考虑到我们服务器之前安装过 RabbitMQ ，所以我们就用 RabbitMQ 来充当消息队列吧。</p><h3 id="canal-配置" tabindex="-1"><a class="header-anchor" href="#canal-配置" aria-hidden="true">#</a> Canal 配置</h3><p>修改 <code>conf/canal.properties</code> 配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 指定模式</span>
canal.serverMode = rabbitMQ
<span class="token comment"># 指定实例,多个实例使用逗号分隔: canal.destinations = example1,example2</span>
canal.destinations = example 

<span class="token comment"># rabbitmq 服务端 ip</span>
rabbitmq.host = 127.0.0.1
<span class="token comment"># rabbitmq 虚拟主机 </span>
rabbitmq.virtual.host = / 
<span class="token comment"># rabbitmq 交换机  </span>
rabbitmq.exchange = xxx
<span class="token comment"># rabbitmq 用户名</span>
rabbitmq.username = xxx
<span class="token comment"># rabbitmq 密码</span>
rabbitmq.password = xxx
rabbitmq.deliveryMode =
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改实例配置文件 <code>conf/example/instance.properties</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#配置 slaveId,自定义,不等于 mysql 的 server Id 即可</span>
canal.instance.mysql.slaveId=10 

<span class="token comment"># 数据库地址:配置自己的ip和端口</span>
canal.instance.master.address=ip<span class="token punctuation">:</span>port 
 
<span class="token comment"># 数据库用户名和密码 </span>
canal.instance.dbUsername=xxx 
canal.instance.dbPassword=xxx
	
<span class="token comment"># 指定库和表</span>
canal.instance.filter.regex=.<span class="token important">*\\\\..*</span>    // 这里的 .* 表示 canal.instance.master.address 下面的所有数据库
		
<span class="token comment"># mq config</span>
<span class="token comment"># rabbitmq 的 routing key</span>
canal.mq.topic=xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启 canal 服务。</p>`,7),m={href:"https://mp.weixin.qq.com/s?__biz=MzI5MDg2NjEzNA==&mid=2247488054&idx=2&sn=c0d7684042faf7d5f6add615f83b8082&chksm=ec18048fdb6f8d99fefd95b65fbde9220817b236d5013e87008cb5c1b339453b51eee59b2058&token=933180097&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},v={href:"https://mp.weixin.qq.com/s?__biz=MzI5MDg2NjEzNA==&mid=2247484058&idx=1&sn=a18a1bbd308a63dbf51ddbfaf0128e04&chksm=ec181423db6f9d3587c45b57590fe2b80a078280f58a64e71d977cf11a6572eeeaabf2c0604c&token=933180097&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},b=e(`<h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h3><p>建表语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>product_info<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>price<span class="token punctuation">\`</span></span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>create_date<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>update_date<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据初始化</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> cheetah<span class="token punctuation">.</span>product_info
<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> create_date<span class="token punctuation">,</span> update_date<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;从你的全世界路过&#39;</span><span class="token punctuation">,</span> <span class="token number">14.0000</span><span class="token punctuation">,</span> <span class="token string">&#39;2020-11-21 21:26:12&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2021-03-27 22:17:39&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> cheetah<span class="token punctuation">.</span>product_info
<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> create_date<span class="token punctuation">,</span> update_date<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;乔布斯传&#39;</span><span class="token punctuation">,</span> <span class="token number">25.0000</span><span class="token punctuation">,</span> <span class="token string">&#39;2020-11-21 21:26:42&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2021-03-27 22:17:42&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> cheetah<span class="token punctuation">.</span>product_info
<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> create_date<span class="token punctuation">,</span> update_date<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;java开发&#39;</span><span class="token punctuation">,</span> <span class="token number">87.0000</span><span class="token punctuation">,</span> <span class="token string">&#39;2021-03-27 22:43:31&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2021-03-27 22:43:34&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><p>项目引入的依赖比较多，为了不占用过多的篇幅，大家可以在公众号【阿Q说代码】后台回复“canal”获取项目源码！</p><p>MySQL 和 Redis 的相关配置在此不再赘述，有不懂的可以私聊阿Q：qingqing-4132；</p><h3 id="rabbitmq-配置" tabindex="-1"><a class="header-anchor" href="#rabbitmq-配置" aria-hidden="true">#</a> RabbitMQ 配置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CANAL_QUEUE</span> <span class="token operator">=</span> <span class="token string">&quot;canal_queue&quot;</span><span class="token punctuation">;</span><span class="token comment">//队列</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DIRECT_EXCHANGE</span> <span class="token operator">=</span> <span class="token string">&quot;canal&quot;</span><span class="token punctuation">;</span><span class="token comment">//交换机,要与canal中配置的相同</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ROUTING_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;routingkey&quot;</span><span class="token punctuation">;</span><span class="token comment">//routing-key,要与canal中配置的相同</span>

    <span class="token doc-comment comment">/**
     * 定义队列
     **/</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">canalQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token constant">CANAL_QUEUE</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 定义直连交换机
     **/</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token constant">DIRECT_EXCHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 队列和交换机绑定
     **/</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">orderBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">canalQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token constant">ROUTING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="商品信息入缓存" tabindex="-1"><a class="header-anchor" href="#商品信息入缓存" aria-hidden="true">#</a> 商品信息入缓存</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取商品信息：
 * 先从缓存中查，如果不存在再去数据库中查，然后将数据保存到缓存中
 * <span class="token keyword">@param</span> <span class="token parameter">productInfoId</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">ProductInfo</span> <span class="token function">findProductInfo</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productInfoId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//1.从缓存中获取商品信息</span>
	<span class="token class-name">Object</span> object <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">REDIS_PRODUCT_KEY</span> <span class="token operator">+</span> productInfoId<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ProductInfo</span><span class="token punctuation">)</span>object<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//2.如果缓存中不存在，从数据库获取信息</span>
	<span class="token class-name">ProductInfo</span> productInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>productInfoId<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>productInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//3.将商品信息缓存</span>
		redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">REDIS_PRODUCT_KEY</span><span class="token operator">+</span>productInfoId<span class="token punctuation">,</span> productInfo<span class="token punctuation">,</span>
				<span class="token constant">REDIS_PRODUCT_KEY_EXPIRE</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> productInfo<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行方法后，查看 Redis 客户端是否有数据存入</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16df62ffb6d846cb810a8fd9b26a4df1~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="更新数据入mq" tabindex="-1"><a class="header-anchor" href="#更新数据入mq" aria-hidden="true">#</a> 更新数据入MQ</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 更新商品信息
 * <span class="token keyword">@param</span> <span class="token parameter">productInfo</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">AjaxResult</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">ProductInfo</span> productInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>
	productInfoService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token class-name">AjaxResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我执行完 update 方法的时候，去<code>RabbitMQ Management</code> 查看，发现并没有消息进入队列。</p><h4 id="问题描述" tabindex="-1"><a class="header-anchor" href="#问题描述" aria-hidden="true">#</a> 问题描述</h4><p>通过排查之后我在服务器中 canal 下的 <code>/usr/local/logs/example/example.log </code> 文件里发现了问题所在。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5b1687dd0a04677b1e160a29acf98b3~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>原因就是<code>meta.dat</code>中保存的位点信息和数据库的位点信息不一致导致 canal 抓取不到数据库的动作。</p><p>于是我找到 canal 的 <code>conf/example/instance.properties</code> 实例配置文件，发现没有将<code>canal.instance.master.address=127.0.0.1:3306 </code> 设置成自己的数据库地址。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/264e1bca04204907bd85bb788cf0772e~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h4><ul><li>先停止 canal 服务的运行；</li><li>删除<code>meta.dat</code>文件；</li><li>再重启 canal，问题解决；</li></ul><p>再次执行 update 方法，会发现 <code>RabbitMQ Management</code>中已经有我们想要的数据了。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d859842f9c4e4f35be6bed2db1989494~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="mq接收数据" tabindex="-1"><a class="header-anchor" href="#mq接收数据" aria-hidden="true">#</a> MQ接收数据</h3><p>编写 RabbitMQ 消费代码的逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;canal_queue&quot;</span><span class="token punctuation">)</span><span class="token comment">//监听队列名称</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
	<span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消费的队列消息来自：&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConsumerQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//删除reids中对应的key</span>
		<span class="token class-name">ProductInfoDetail</span> productInfoDetail <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">ProductInfoDetail</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;库名：&quot;</span><span class="token operator">+</span> productInfoDetail<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;表名: &quot;</span><span class="token operator">+</span> productInfoDetail<span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>productInfoDetail<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> productInfoDetail<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductInfo</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> productInfoDetail<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">ProductInfo</span> productInfo <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>productInfo<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token class-name">Long</span> id <span class="token operator">=</span> productInfo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token constant">REDIS_PRODUCT_KEY</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
				channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>deliveryTag <span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
		channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们再次调用 <code>update</code>接口时，控制台会打印以下信息</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/991f14682d1d46869d0dc727c96367d1~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从图中打印的信息可以看出就是我们的库和表以及消息队列，Redis 客户端中缓存的信息也被删除了。</p><h2 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h2><p>看到这，你肯定会问：RabbitMQ 是<strong>阅后即焚</strong>的机制，它确认消息被消费者消费后会立刻删除，如果此时我们的业务还没有跑完，没来的及删除 Redis 中的缓存就宕机了，岂不是缓存一直都得不到更新了吗？</p><p>首先我们要明确的是 RabbitMQ 是通过<strong>消费者回执</strong>来确认消费者是否成功处理消息的，即消费者获取消息后，应该向 RabbitMQ 发送 ACK 回执，表明自己已经处理消息了。</p><p>为了不让上述问题出现，消费者返回 ACK 回执的时机就显得非常重要了， 而 SpringAMQP 也为我们提供了三种可选的确认模式：</p><ul><li>manual：手动 ack，需要在业务代码结束后，调用 api 发送 ack；</li><li>auto：自动 ack ，由 spring 监测 listener 代码是否出现异常，没有异常则返回 ack，抛出异常则返回 nack；</li><li>none：关闭 ack，MQ 假定消费者获取消息后会成功处理，因此消息投递后立即被删除；</li></ul><p>由此可知在 none 模式下消息投递最不可靠，可能会丢失消息；在默认的 auto 模式下如果出现服务器宕机的情况也是会丢失消息的，本次实战中，阿Q为了防止消息丢失采用的是 manual 这种模式，配置信息如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> manual <span class="token comment">#开启手动确认</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以在代码中也就出现了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//用于肯定确认</span>
channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//用于否定确认</span>
channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>deliveryTag <span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然此种模式虽然不会丢失消息，但是会导致效率变低。</p><p>今天的内容到这里就结束了，赶快动手体验一下吧！后台回复“canal”获取项目源码。我是阿Q，我们下期再见。</p>`,44),f=n("p",null,"参考文章：",-1),g={href:"https://mp.weixin.qq.com/s?__biz=MzIyOTYxNDI5OA==&mid=2247487312&idx=1&sn=fa19566f5729d6598155b5c676eee62d&chksm=e8beb8e5dfc931f3e35655da9da0b61c79f2843101c130cf38996446975014f958a6481aacf1&scene=178&cur_album_id=1699766580538032128#rd",target:"_blank",rel:"noopener noreferrer"};function h(y,_){const a=i("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("这篇文章中有 mysql 的安装教程："),n("a",d,[s("mysql 安装"),t(a)])]),n("p",null,[s("这篇文章中有 canal 的安装教程以及对 mysql 的相关配置："),n("a",r,[s("canal安装"),t(a)])]),k,n("p",null,[s("这篇文章中有 RabbitMQ 的安装教程："),n("a",m,[s("RabbitMQ安装"),t(a)])]),n("p",null,[s("这篇文章中有 Redis 的安装教程："),n("a",v,[s("Redis安装"),t(a)])]),b,n("blockquote",null,[f,n("p",null,[n("a",g,[s("https://mp.weixin.qq.com/s?__biz=MzIyOTYxNDI5OA==&mid=2247487312&idx=1&sn=fa19566f5729d6598155b5c676eee62d&chksm=e8beb8e5dfc931f3e35655da9da0b61c79f2843101c130cf38996446975014f958a6481aacf1&scene=178&cur_album_id=1699766580538032128#rd"),t(a)])])])])}const x=p(l,[["render",h],["__file","实现缓存和数据库一致性方案实战.html.vue"]]);export{x as default};
