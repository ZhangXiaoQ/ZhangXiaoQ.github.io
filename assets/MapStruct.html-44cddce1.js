import{_ as e,W as o,X as c,Y as n,Z as a,a0 as t,a2 as p,C as l}from"./framework-a9f5de78.js";const i={},u=n("p",null,[a("前几天，远在北京的小伙伴在群里抛出了"),n("code",null,"“MapStruct”"),a("的概念。对于只闻其名，未见其人的我来说，决定对其研究一番。本文我们就从 "),n("code",null,"MapStruct"),a(" 的概念出发，通过具体的代码示例来研究它的使用情况，最后与“市面上”的其它工具来做个对比！")],-1),r=n("h2",{id:"官方介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#官方介绍","aria-hidden":"true"},"#"),a(" 官方介绍")],-1),d=n("code",null,"MapStruct",-1),k={href:"http://mapstruct.org/",target:"_blank",rel:"noopener noreferrer"},v=p('<h3 id="what-is-it" tabindex="-1"><a class="header-anchor" href="#what-is-it" aria-hidden="true">#</a> What is it?</h3><p><code>MapStruct</code> 是一个<strong>代码生成器</strong>，它基于约定优先于配置的方法大大简化了 <code>JavaBean</code> 类型之间映射的实现。生成的映射代码使用<strong>普通方法</strong>调用，因此速度快、类型<strong>安全</strong>且易于理解。</p><h3 id="why" tabindex="-1"><a class="header-anchor" href="#why" aria-hidden="true">#</a> Why?</h3><p>多层应用程序通常需要在不同的对象模型（例如实体和 <code>DTO</code>）之间进行<strong>映射</strong>。编写这样的映射代码是一项乏味且容易出错的任务。<code>MapStruct</code> 旨在通过尽可能自动化来简化这项工作。</p><p>与其他映射框架不同，<code>MapStruct</code> 在<strong>编译时</strong>生成 <code>bean</code> 映射，这确保了高性能，允许快速的开发人员反馈和彻底的错误检查。</p><h3 id="how" tabindex="-1"><a class="header-anchor" href="#how" aria-hidden="true">#</a> How?</h3><p><code>MapStruct</code> 是插入 <code>Java</code> 编译器的<strong>注释</strong>处理器，可以在命令行构建（<code>Maven</code>、<code>Gradle</code>等）中使用，也可以在首选 <code>IDE</code> 中使用。它使用合理的默认值，但在配置或实现特殊行为时，用户可以自定义实现。</p><p>官网的解释总是咬文嚼字，晦涩难懂的，看到这你只需要记住 <code>MapStruct</code> 是用来做实体类映射——实体类拷贝 的就可以了。</p>',8),m={href:"https://github.com/mapstruct/mapstruct",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/mapstruct/mapstruct-examples",target:"_blank",rel:"noopener noreferrer"},g=p(`<h2 id="简单实现" tabindex="-1"><a class="header-anchor" href="#简单实现" aria-hidden="true">#</a> 简单实现</h2><p>我们注意到官网中有涉及到简单样例的实现，我们用2分钟来分析一波：</p><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct-jdk8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
//注解处理器，根据注解自动生成mapper的实现
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们在编译时会报 <code> java: No property named &quot;numberOfSeats&quot; exists in source parameter(s). Did you mean &quot;null&quot;?</code> 错误，经过查阅资料发现 <code>mapstruct-processor</code> 和 <code>Lombok</code> 的版本需要统一一下：<code>mapstruct-processor</code>：<code>1.2.0.Final</code> ， <code>Lombok</code>：<code>1.16.14</code>。</p></blockquote><h3 id="model-准备" tabindex="-1"><a class="header-anchor" href="#model-准备" aria-hidden="true">#</a> Model 准备</h3><p>准备实体类 <code>Car.java</code> 和 数据传输类 <code>CarDto.java</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> make<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> numberOfSeats<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">CarType</span> type<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> make<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> seatCount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建映射器接口" tabindex="-1"><a class="header-anchor" href="#创建映射器接口" aria-hidden="true">#</a> 创建映射器接口</h3><p>定义映射方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarMapper</span> <span class="token punctuation">{</span>
 
    <span class="token class-name">CarMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> <span class="token class-name">CarMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;numberOfSeats&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;seatCount&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">CarDto</span> <span class="token function">carToCarDto</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span> 
   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析分析：</strong></p><ul><li><code>@Mapper</code> 将接口标记为映射接口，并允许 <code>MapStruct</code> 处理器在编译期间启动。这里的 <code>@Mapper</code> 注解不是 <code>mybatis</code> 的注解，而是 <code>org.mapstruct.Mapper</code> 的；</li><li>实际映射方法 <code>carToCarDto()</code> 期望源对象 <code>Car</code> 作为参数，并返回目标对象 <code>CarDto</code> ，方法名可以自由选择；</li><li>对于源对象和目标对象中具有<strong>不同名称</strong>的属性，可以使用 <code>@Mapping</code> 注释来配置名称；</li><li>对于源对象和目标对象中具有<strong>不同类型</strong>的属性，也可以使用 <code>@Mapping</code> 注释来进行转换，比如：类型属性将从枚举类型转换为字符串；</li><li>一个接口中可以有多个映射方法，对于所有的这些方法，<code>MapStruct</code> 将生成一个实现；</li><li>该接口的实现实例可以从 <code>Mappers</code> 中获得，接口声明一个 <code>INSTANCE</code>，为客户端提供对映射器实现的访问。</li></ul><h3 id="实现类" tabindex="-1"><a class="header-anchor" href="#实现类" aria-hidden="true">#</a> 实现类</h3><p>我们可以将代码进行编译，然后会发现在 <code>target</code> 文件中生成了 <code>CarMapperImpl.class</code> 文件：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4732ea2535c147e78157eb7e147355f1~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从代码中可以看出 <code>MapStruct</code> 为我们自动生成了 <code>set/get</code> 代码，并且对<strong>枚举类</strong>进行了特殊处理。</p><h3 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shouldMapCarToDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span> <span class="token string">&quot;Morris&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">CarType</span><span class="token punctuation">.</span><span class="token constant">SEDAN</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CarDto</span> carDto <span class="token operator">=</span> <span class="token class-name">CarMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">carToCarDto</span><span class="token punctuation">(</span> car <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>carDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6c22d64d71f4293b794a2170dcf60f6~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>小结: <code>MapStruct</code> 基于 <code>mapper</code> 接口，在<strong>编译期</strong>动态生成 <code>set/get</code> 代码的 <code>class</code> 文件 ，在运行时直接调用该 <code>class</code> 文件。</p></blockquote><h2 id="mapstruct-配置" tabindex="-1"><a class="header-anchor" href="#mapstruct-配置" aria-hidden="true">#</a> MapStruct 配置</h2><h3 id="mapper" tabindex="-1"><a class="header-anchor" href="#mapper" aria-hidden="true">#</a> @Mapper</h3><p>我们翻开上边提到的 <code>Mapper</code> 注释的源码，该注释的解释是：将接口或抽象类标记为<strong>映射器</strong>，并通过 <code>MapStruct</code> 激活<strong>该类型实现</strong>的生成。我们找到其中的 <strong>componentModel</strong> 属性，默认值为 <code>default</code>，它有四种值供我们选择：</p><ul><li>default：映射器不使用组件模型，实例通常通过 <code>Mappers.getMapper（java.lang.Class）</code>获取;</li><li>cdi：生成的映射器是 <code>application-scoped</code> 的<code>CDI bean</code>，可以通过 <code>@Inject</code> 获取；</li><li>spring：生成的映射器是 <code>Spring bean</code>，可以通过 <code>@Autowired</code> 获取；</li><li>jsr330：生成的映射器被 <code>@javax.inject.Named</code> 和 <code>@Singleton</code> 注释，可以通过 <code>@inject</code> 获取；</li></ul><p>上边我们用的就是默认的方法，当然我们也可以用 <code>@Autowired</code> 来引入接口依赖，此处不再举例，有兴趣的小伙伴可以自己试试！</p><p>另外我们可以看下 <code>uses</code> 属性：可以通过定义其他类来完成字段转换，接下来我们来个小例子演示一下：</p><p><strong>1. 定义一个 CarVo.java 类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarVo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> make<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> seatCount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> type<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 在 mapper 中定义一个 vo 转为 dto 的方法 <code>CarDto carVoToCarDto(CarVo carVo);</code></strong></p><p>当不加 <code>uses</code> 属性时，查看编译后生成的实现类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CarDto</span> <span class="token function">carVoToCarDto</span><span class="token punctuation">(</span><span class="token class-name">CarVo</span> carVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>carVo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token class-name">CarDto</span> carDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		carDto<span class="token punctuation">.</span><span class="token function">setMake</span><span class="token punctuation">(</span>carVo<span class="token punctuation">.</span><span class="token function">getMake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		carDto<span class="token punctuation">.</span><span class="token function">setSeatCount</span><span class="token punctuation">(</span>carVo<span class="token punctuation">.</span><span class="token function">getSeatCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		carDto<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>carVo<span class="token punctuation">.</span><span class="token function">isType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> carDto<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 在 <code>mapper</code> 上增加 <code>uses</code> 属性，并指定自定义的处理类，代码如下：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span><span class="token keyword">uses</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">BooleanStrFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarMapper</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* 自定义的转换类
*/</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BooleanStrFormat</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toStr</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Y&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;N&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;Y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* 查看编译后生成的实现类
*/</span>
<span class="token keyword">public</span> <span class="token class-name">CarDto</span> <span class="token function">carVoToCarDto</span><span class="token punctuation">(</span><span class="token class-name">CarVo</span> carVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>carVo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token class-name">CarDto</span> carDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		carDto<span class="token punctuation">.</span><span class="token function">setMake</span><span class="token punctuation">(</span>carVo<span class="token punctuation">.</span><span class="token function">getMake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		carDto<span class="token punctuation">.</span><span class="token function">setSeatCount</span><span class="token punctuation">(</span>carVo<span class="token punctuation">.</span><span class="token function">getSeatCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用自定义的类中的方法</span>
		carDto<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>booleanStrFormat<span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>carVo<span class="token punctuation">.</span><span class="token function">isType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> carDto<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.客户端代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shouldMapCarVoToDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token class-name">CarVo</span> carVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarVo</span><span class="token punctuation">(</span> <span class="token string">&quot;Morris&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">CarDto</span> carDto <span class="token operator">=</span> <span class="token class-name">CarMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">carVoToCarDto</span><span class="token punctuation">(</span> carVo <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>carDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08b2d11e89734cca88596982f848344b~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="mapping" tabindex="-1"><a class="header-anchor" href="#mapping" aria-hidden="true">#</a> @Mapping</h3><p><code>@Mapping</code> 可以用来配置一个 <code>bean</code> 属性或枚举常量的映射，默认是将具有相同名称的属性进行映射，当然也可以用 <code>source</code>、<code>expression</code> 或者 <code>constant</code> 属性手动指定，接下来我们来分析下常用的属性值。</p><ol><li>target：属性的目标名称，同一目标属性不能映射多次。如果用于映射枚举常量，则将给出常量成员的名称，在这种情况下，源枚举中的多个值可以映射到目标枚举的相同值。</li><li>source：属性的源名称，</li></ol><ul><li>如果带注释的方法有多个源参数，则属性名称必须使用参数名称限定，例如<code>“addressParam.city&quot;</code>；</li><li>当找不到匹配的属性时，<code>MapStruct</code> 将查找匹配的参数名称；</li><li>当用于映射枚举常量时，将给出常量成员的名称；</li><li>该属性不能与 <code>constant</code> 或 <code>expression</code> 一起使用；</li></ul><ol start="3"><li>dateFormat：通过 <code>SimpleDateFormat</code> 实现 <code>String</code> 到 <code>Date</code> 日期之间相互转换。</li><li>numberFormat：通过 <code>DecimalFormat</code> 实现 <code>Number</code> 与 <code>String</code> 的数值格式化。</li><li>constant：设置指定目标属性的常量字符串，当指定的目标属性的类型为：<code>primitive</code> 或 <code>boxed</code>（例如 <code>Long</code>）时，<code>MapStruct</code> 检查是否可以将该 <code>primitive</code> 作为有效的文本分配给 <code>primitive</code> 或 <code>boxed</code> 类型。如果可能，<code>MapStruct</code> 将分配为文字；如果不可能，<code>MapStruct</code> 将尝试应用用户定义的映射方法。 另外，<code>MapStruct</code> 将常量作为字符串处理，将通过应用匹配方法、类型转换方法或内置转换来转换该值。此属性不能与 <code>source</code>、<code>defaultValue</code>、<code>defaultExpression</code> 或 <code>expression</code> 一起使用。</li><li>expression：是一个表达式，根据该表达式设置指定的目标属性。他的属性不能与 <code>source</code>、 <code>defaultValue</code>、<code>defaultExpression</code>、<code>constant</code> 一起使用。</li><li>ignore: 忽略这个字段。</li></ol><p>我们用 <code>expression</code> 这个属性来实现一下上边用 <code>uses</code> 实现的案例：</p><p><strong>1. 在 mapper 中定义方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(new com.ittest.controller.BooleanStrFormat().toStr(carVo.isType()))&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">CarDto</span> <span class="token function">carVoToDtoWithExpression</span><span class="token punctuation">(</span><span class="token class-name">CarVo</span> carVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 生成的实现类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">CarDto</span> <span class="token function">carVoToDtoWithExpression</span><span class="token punctuation">(</span><span class="token class-name">CarVo</span> carVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> carVo <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token class-name">CarDto</span> carDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	carDto<span class="token punctuation">.</span><span class="token function">setMake</span><span class="token punctuation">(</span> carVo<span class="token punctuation">.</span><span class="token function">getMake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	carDto<span class="token punctuation">.</span><span class="token function">setSeatCount</span><span class="token punctuation">(</span> carVo<span class="token punctuation">.</span><span class="token function">getSeatCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	carDto<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>ittest<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>BooleanStrFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toStr</span><span class="token punctuation">(</span>carVo<span class="token punctuation">.</span><span class="token function">isType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> carDto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 客户端</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mapCarVoToDtoWithExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token class-name">CarVo</span> carVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarVo</span><span class="token punctuation">(</span> <span class="token string">&quot;Morris&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">CarDto</span> carDto <span class="token operator">=</span> <span class="token class-name">CarMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">carVoToDtoWithExpression</span><span class="token punctuation">(</span> carVo <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>carDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bf44350f97d455ba5e1bfcc4129efee~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>重要提示：枚举映射功能已被弃用，并被 <code>ValueMapping</code> 取代。它将在后续版本中删除。</p></blockquote><h3 id="mappings" tabindex="-1"><a class="header-anchor" href="#mappings" aria-hidden="true">#</a> @Mappings</h3><p>可以配置多个 <code>@Mapping</code>，例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;carId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;carName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;carColor&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mappingtarget" tabindex="-1"><a class="header-anchor" href="#mappingtarget" aria-hidden="true">#</a> @MappingTarget</h3><p>用于更新已有对象，还是用例子来说明吧：</p><p><strong>1. 创建 BMWCar.java 类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BMWCar</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> make<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> numberOfSeats<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">CarType</span> type<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> price<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. mapper 中创建更新方法，并查看实现类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 更新方法</span>
<span class="token keyword">void</span> <span class="token function">updateBwmCar</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">,</span> <span class="token annotation punctuation">@MappingTarget</span> <span class="token class-name">BMWCar</span> bwmCar<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 实现类</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBwmCar</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">,</span> <span class="token class-name">BMWCar</span> bwmCar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>car <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		bwmCar<span class="token punctuation">.</span><span class="token function">setMake</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getMake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		bwmCar<span class="token punctuation">.</span><span class="token function">setNumberOfSeats</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getNumberOfSeats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		bwmCar<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 客户端代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBwmCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span> <span class="token string">&quot;Morris&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">CarType</span><span class="token punctuation">.</span><span class="token constant">SEDAN</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">BMWCar</span> bwmCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMWCar</span><span class="token punctuation">(</span><span class="token string">&quot;BWM&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">CarType</span><span class="token punctuation">.</span><span class="token constant">SPORTS</span><span class="token punctuation">,</span> <span class="token string">&quot;RED&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;50w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;更新前 car:&quot;</span><span class="token operator">+</span>car<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;更新前 BWMCar:&quot;</span><span class="token operator">+</span>bwmCar<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">CarMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">updateBwmCar</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> bwmCar<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;更新后 car:&quot;</span><span class="token operator">+</span>car<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;更新后 BWMCar:&quot;</span><span class="token operator">+</span>bwmCar<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8e6a15a4aa44d08a8dbcc01c6a48879~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="扩展-多个对象映射一个对象" tabindex="-1"><a class="header-anchor" href="#扩展-多个对象映射一个对象" aria-hidden="true">#</a> 扩展：多个对象映射一个对象</h3><p><strong>1. 准备实体类 <code>Benz4SMall.java</code> 和 <code>Mall4S.java</code></strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mall4S</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Benz4SMall</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> make<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> numberOfSeats<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. mapper 创建转换方法并查看生成的实现类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Benz4SMall</span> <span class="token function">mallCarToBenzMall</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">,</span> <span class="token class-name">Mall4S</span> mall4S<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
* 实现类
*/</span>
<span class="token keyword">public</span> <span class="token class-name">Benz4SMall</span> <span class="token function">mallCarToBenzMall</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">,</span> <span class="token class-name">Mall4S</span> mall4S<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mall4S <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token class-name">Benz4SMall</span> benz4SMall <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Benz4SMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>car <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			benz4SMall<span class="token punctuation">.</span><span class="token function">setMake</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getMake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			benz4SMall<span class="token punctuation">.</span><span class="token function">setNumberOfSeats</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getNumberOfSeats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>mall4S <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			benz4SMall<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>mall4S<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			benz4SMall<span class="token punctuation">.</span><span class="token function">setMobile</span><span class="token punctuation">(</span>mall4S<span class="token punctuation">.</span><span class="token function">getMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span> benz4SMall<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 客户端</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mallCarToBenzMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span> <span class="token string">&quot;Morris&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">CarType</span><span class="token punctuation">.</span><span class="token constant">SEDAN</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Mall4S</span> mall4S <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mall4S</span><span class="token punctuation">(</span><span class="token string">&quot;北京市&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;135XXXX4503&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Benz4SMall</span> benz4SMall <span class="token operator">=</span> <span class="token class-name">CarMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">mallCarToBenzMall</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> mall4S<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>benz4SMall<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7828f5407db741af8b361979ae1f4ce8~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="深拷贝与浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝与浅拷贝" aria-hidden="true">#</a> 深拷贝与浅拷贝</h3><p>深拷贝和浅拷贝最根本的区别在于是否真正获取一个对象的复制<strong>实体</strong>，而不是引用。</p><p>假设 B 复制了 A ，修改 A 的时候，看 B 是否发生变化：如果 B 跟着也变了，说明是浅拷贝，<strong>拿人手短</strong>！（修改堆内存中的同一个值）；如果 B 没有改变，说明是深拷贝，<strong>自食其力</strong>！（修改堆内存中的不同的值）</p><p>MapStruct 中是<strong>创建新的对象</strong>，也就是<strong>深拷贝</strong>。</p><h2 id="mapstruct-与其他-copy-的对比" tabindex="-1"><a class="header-anchor" href="#mapstruct-与其他-copy-的对比" aria-hidden="true">#</a> MapStruct 与其他 Copy 的对比</h2><p>我们在平时的项目中经常会使用到拷贝的功能，今天我们就将他们做一下对比，直接抛出 <strong>ZhaoYingChao88</strong> 大佬的实验结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a0f8caf765b44bdaaa46784853311eb~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>输出结果：<code>手动Copy &gt;Mapstuct&gt;= cglibCopy &gt; springBeanUtils &gt; apachePropertyUtils &gt; apacheBeanUtils</code> 可以理解为: <code>手工复制 &gt; cglib &gt; 反射 &gt; Dozer</code>。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/49f43496f8784390807110b2b343ec4c~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>根据测试结果，我们可以得出在速度方面，<code>MapStruct</code> 是最好的，执行速度是 <code>Apache BeanUtils</code> 的10倍、<code>Spring BeanUtils</code> 的 4-5倍、和 <code>BeanCopier</code> 的速度差不多。</p><blockquote><p>总结：在大数据量级的情况下，<code>MapStruct</code> 和 <code>BeanCopier</code> 都有着较高的性能优势，其中 <code>MapStruct</code> 尤为优秀。如果你仅是在日常处理少量的对象时，选取哪个其实变得并不重要，但数据量大时建议还是使用 <code>MapStruct</code> 或 <code>BeanCopier</code> 的方式，提高接口性能。</p></blockquote>`,87),f={href:"https://blog.csdn.net/ZYC88888/article/details/109681423?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},y=n("blockquote",null,[n("p",null,"回复“mapstruct”，即可获取源码呦！")],-1);function h(w,C){const s=l("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[a("首先我们打开 "),d,a(" 的"),n("a",k,[a("官网地址"),t(s)]),a("，映入眼帘的就是下边的三步曲：")]),v,n("blockquote",null,[n("p",null,[a("源码地址："),n("a",m,[a("https://github.com/mapstruct/mapstruct"),t(s)])]),n("p",null,[a("官网推荐的 Demo： "),n("a",b,[a("https://github.com/mapstruct/mapstruct-examples"),t(s)])])]),g,n("p",null,[a("参考链接："),n("a",f,[a("https://blog.csdn.net/ZYC88888/article/details/109681423?spm=1001.2014.3001.5501"),t(s)])]),y])}const M=e(i,[["render",h],["__file","MapStruct.html.vue"]]);export{M as default};
