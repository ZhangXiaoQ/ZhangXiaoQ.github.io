const e=JSON.parse('{"key":"v-1a1b7fb9","path":"/cheetah/java/%E6%B3%9B%E5%9E%8B.html","title":"如何在两个相关泛型类之间创建类似子类型的关系","lang":"zh-CN","frontmatter":{"title":"如何在两个相关泛型类之间创建类似子类型的关系","icon":"java","order":12,"category":["java"],"tag":["泛型","子类型"],"description":"事情是这个样子的...... 对话中的截图如下： 看了阿Q的解释，你是否也和“马小跳”一样存在疑问呢？请往👇看 我们都知道在java中，只要是类型兼容，就可以将一种类型的对象分配给另一种类型的对象。比如可以将一个Integer类型的对象分配给Object类型的对象，因为Object 是Integer的超类。 在面向对象中，我们把它称之为 is a 的...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/cheetah/java/%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"阿Q说代码"}],["meta",{"property":"og:title","content":"如何在两个相关泛型类之间创建类似子类型的关系"}],["meta",{"property":"og:description","content":"事情是这个样子的...... 对话中的截图如下： 看了阿Q的解释，你是否也和“马小跳”一样存在疑问呢？请往👇看 我们都知道在java中，只要是类型兼容，就可以将一种类型的对象分配给另一种类型的对象。比如可以将一个Integer类型的对象分配给Object类型的对象，因为Object 是Integer的超类。 在面向对象中，我们把它称之为 is a 的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-04T08:56:36.000Z"}],["meta",{"property":"article:author","content":"阿Q"}],["meta",{"property":"article:tag","content":"泛型"}],["meta",{"property":"article:tag","content":"子类型"}],["meta",{"property":"article:modified_time","content":"2023-04-04T08:56:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何在两个相关泛型类之间创建类似子类型的关系\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-04T08:56:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阿Q\\",\\"url\\":\\"https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=MzI5MDg2NjEzNA==#wechat_redirect\\"}]}"]]},"headers":[],"git":{"createdTime":1680598596000,"updatedTime":1680598596000,"contributors":[{"name":"ZhangXiaoQ","email":"1004387130@qq.com","commits":1}]},"readingTime":{"minutes":3.4,"words":1020},"filePathRelative":"cheetah/java/泛型.md","localizedDate":"2023年4月4日","autoDesc":true}');export{e as data};
