import{_ as n,W as s,X as a,a2 as t}from"./framework-a9f5de78.js";const e={},p=t(`<h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h3><p>今天又双叒叕被抓壮丁了，被安排进了新的项目组进行任务开发。加入新项目后的第一件事，当然是先研究下同事的代码喽。</p><p>在“学习”代码的过程中竟然惊奇的发现同事写了测试用例，对于一直使用<code>PostMan</code>来进行接口测试的我表示非常不理解，测试用例到底有什么神奇之处？</p><h3 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析" aria-hidden="true">#</a> 需求分析</h3><p>带着疑问翻看了测试用例，发现同事用它来实现了管理后台登录自动生成<code>Token</code>的功能。</p><blockquote><p>生成<code>Token</code>用<code>PostMan</code>不是也很好实现吗？何必要多此一举？</p></blockquote><p>百闻不如见面，直接上图</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a182a75c3fa84f25abd423ef833c72c4~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>看到这张图是不是很熟悉？市面上的大部分登录界面都长这样吧。我们来简单分析下这个登录功能：</p><ul><li>调用生成图片验证码接口，将生成的验证码图片返回前端，将验证码的文本保存到<code>Redis</code>缓存中；</li><li>调用短信验证码接口，将短信发送到对应的手机号，将验证码也保存到<code>Redis</code>缓存中；</li><li>调用登录接口，将填写信息进行校验，返回登录<code>Token</code>；</li></ul><p>如果我们使用<code>PostMan</code>的话，得写三个请求才能获取到最终需要的<code>Token</code>，比较繁琐，而如果使用同事写的测试用例，可以直接运行获取到<code>Token</code>。那他是如何实现的呢？</p><h3 id="mock" tabindex="-1"><a class="header-anchor" href="#mock" aria-hidden="true">#</a> Mock</h3><p>在了解实现之前，我们先来了解下什么是<code>Mock</code>？<code>Mock</code>的翻译是虚假的、模拟的。它的作用就是在测试环境中创建一个类的虚假对象，用来替换掉真实的对象，以达到方便测试的目的。</p><blockquote><p>举个例子：假如你正在开发下订单的需求，此时你需要调用<code>B</code>服务来完成减积分的操作，而此时<code>B</code>服务还在开发中，你就可以<code>Mock</code>一个对象，模拟<code>B</code>服务的返回结果，根据结果来完成自己的逻辑开发。</p></blockquote><p>当然，<code>SpringBoot</code>也为我们提供了<code>Mock</code>单元测试，需要引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该依赖提供了以下类库</p><ul><li><code>JUnit</code>：<code>JAVA</code>应用单元测试框架，默认依赖版本是4.12（<code>JUnit5</code>和<code>JUnit4</code>差别比较大，集成方式不同）；</li><li><code>Spring Test &amp; Spring Boot Test</code>：测试支持；</li><li><code>AssertJ</code>：断言库，提供流式的断言支持；</li><li><code>Hamcrest</code>：对象匹配断言和约束组件；</li><li><code>Mockito</code>： <code>Java mock</code>框架；</li><li><code>JSONassert</code>： <code>JSON</code>断言库；</li><li><code>JsonPath</code>：<code>JSON XPath</code>操作类库；</li></ul><h3 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h3><p>使用<code>Mock</code>之前，我们再来了解几个测试过程中用到的注解。</p><h4 id="springboottest" tabindex="-1"><a class="header-anchor" href="#springboottest" aria-hidden="true">#</a> @SpringBootTest</h4><p><code>@SpringBootTest</code>为<code>SpringBoot</code>的单元测试环境提供支持。在使用<code>Mock</code>的过程中，我们会发现启动测试程序并不会占用我们的应用端口，本质上来讲就是它不会去启动服务器。</p><p>经过翻阅资料发现，它的这一特性跟它的内部属性值<code>webEnvironment</code>息息相关，它提供了四个枚举值供我们选择：</p><ul><li>MOCK：默认值，如果<code>servlet API</code>在类路径上，则创建一个带有模拟<code>servlet</code>环境的<code>WebApplicationContext</code>，如果<code>Spring WebFlux</code>在类路径上，则创建一个<code>ReactiveWebApplicationContext</code>，否则创建一个常规的<code>ApplicationContext</code>，该选择下不会启动嵌入式服务器；</li><li>RANDOM_PORT：加载<code>WebServerApplicationContext</code>并提供真实的<code>Web</code>环境，启用的是随机<code>web</code>容器端口；</li><li>DEFINED_PORT：加载<code>WebServerApplicationContext</code>并提供真实的<code>Web</code>环境，和<code>RANDOM_PORT</code>不同的是启用配置文件中定义的端口；</li><li>NONE：通过<code>SpringApplication</code>加载<code>ApplicationContext</code>，但不提供任何<code>Web</code>环境；</li></ul><blockquote><p>如果测试时带有<code>@Transactional</code>注解，默认情况下每个测试方法执行完就会回滚事务。但是当<code>webEnvironment</code>设置为<code>RANDOM_PORT</code>或者<code>DEFINED_PORT</code>时，会隐式地提供真实的<code>servlet web</code>环境，此时事务是不会回滚的。</p></blockquote><h4 id="runwith-springrunner-class" tabindex="-1"><a class="header-anchor" href="#runwith-springrunner-class" aria-hidden="true">#</a> @RunWith(SpringRunner.class)</h4><p>运行器，选择不同的<code>Runner</code>调用测试代码，此处指定用<code>SpringRunner</code>来运行。有了该注解，测试类要注入的类才能实例化到<code>Spring</code>容器中。</p><blockquote><p><code>JUnit4</code>需要添加该注解，<code>JUnit5</code>则不需要</p></blockquote><h4 id="方法注解" tabindex="-1"><a class="header-anchor" href="#方法注解" aria-hidden="true">#</a> 方法注解</h4><ul><li>@Test：使用该注解标注的<code>public void</code>方法会表示为一个测试方法；</li><li>@BeforeClass：表示在类中的任意<code>public static void</code>方法执行之前执行；</li><li>@AfterClass：表示在类中的任意<code>public static void</code>方法之后执行；</li><li>@Before：表示在任意使用<code>@Test</code>注解标注的<code>public void</code>方法执行之前执行；</li><li>@After：表示在任意使用<code>@Test</code>注解标注的<code>public void</code>方法执行之后执行；</li><li>@Ignore：执行测试时将忽略掉此方法，如果用于修饰类，则忽略整个类；</li></ul><h3 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h3><p>因为使用的是<code>SpringSecurity</code>鉴权，所以还得引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们先来初始化<code>MockMvc</code>对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//wac 是 WebApplicationContext 对象</span>
<span class="token class-name">MockMvc</span> mvc <span class="token operator">=</span> <span class="token class-name">MockMvcBuilders</span><span class="token punctuation">.</span><span class="token function">webAppContextSetup</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">.</span>
                <span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">springSecurity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="图形验证码" tabindex="-1"><a class="header-anchor" href="#图形验证码" aria-hidden="true">#</a> 图形验证码</h4><p>调用图形验证码接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//perform：执行一个RequestBuilders请求，会自动执行SpringMVC的流程并映射到相应的控制器执行处理</span>
<span class="token class-name">MvcResult</span> mvcResult <span class="token operator">=</span> mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>
    		   <span class="token comment">//模拟发送 GET 请求</span>
                <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/login/capture&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    				     <span class="token comment">//接受参数</span>
                        <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_UTF8</span><span class="token punctuation">)</span>
    					<span class="token comment">//请求类型</span>
                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    			<span class="token comment">//期待的结果状态值 200</span>
                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    			<span class="token comment">//获取方法的返回值 MvcResult</span>
                <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取到返回结果之后进行解析，并保存到<code>Redis</code>缓存中。</p><h4 id="短信验证码" tabindex="-1"><a class="header-anchor" href="#短信验证码" aria-hidden="true">#</a> 短信验证码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>
    <span class="token comment">//模拟发送 POST 请求</span>
	<span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/login/sendSmsCode&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_UTF8</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
		<span class="token comment">// 填充内容</span>
		<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模拟发送短信验证码接口，可以从<code>Redis</code>缓存中获取到短信验证码。</p><h4 id="登录" tabindex="-1"><a class="header-anchor" href="#登录" aria-hidden="true">#</a> 登录</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MvcResult</span> mResult <span class="token operator">=</span> mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>
                <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_UTF8</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>smsLoginDto<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们解析返回结果就可以获取<code>Token</code>了。</p><p>为了让需要登录的接口直接使用我们生成的<code>Token</code>，我们可以把获取图形验证码、短信验证码、登录的接口放在一个方法中，用<code>@Before</code>注释，这样在调用接口之前都会去获取一下<code>Token</code>。我们再把它放到<code>MockHttpSession</code>中，使用的时候直接获取即可。</p><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><p>为了便于测试，我们将上边的方法封装成一个基础类，让使用<code>Token</code>的方法所在的类继承一下该类，就可以使用<code>Token</code>了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token class-name">PageDTO</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	req<span class="token punctuation">.</span><span class="token function">setPageSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	req<span class="token punctuation">.</span><span class="token function">setPageNo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">WrapperResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PageInfo</span><span class="token punctuation">&lt;</span><span class="token class-name">PostResumeVO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> iPageWrapperResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>
			req<span class="token punctuation">,</span>
			<span class="token string">&quot;/resume/mid/getPage&quot;</span><span class="token punctuation">,</span>
			<span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WrapperResult</span><span class="token punctuation">&lt;</span><span class="token class-name">PageInfo</span><span class="token punctuation">&lt;</span><span class="token class-name">PostResumeVO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">outputPretty</span><span class="token punctuation">(</span>iPageWrapperResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看执行结果执行成功。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cc75d5ffabb49a38f27e57b8943828d~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当然你也可以只在<code>test()</code>方法中获取<code>Token</code>，然后用其他工具去调用接口。</p><p>看到这儿，你是不是也摩拳擦掌，想把自己获取复杂<code>Token</code>的操作改成<code>Mock</code>方式？心动不如行动！</p>`,53),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","mock.html.vue"]]);export{d as default};
