import{_ as n,W as s,X as a,a2 as t}from"./framework-a9f5de78.js";const p={},e=t(`<p>提到点赞，大家一想到的是不是就是朋友圈的点赞呀？其实点赞对我们来说并不陌生，我们经常会在手机软件或者网页中看到它，今天就让我们来了解一下它的实现吧。</p><p>我们常见的设计思路大概分为两种：一种自然是用 MySQL 等数据库直接落地存储， 另外一种就是将点赞的数据保存到 Redis 等缓存里，在一定时间后刷回 MySQL 等数据库。</p><h2 id="两种实现" tabindex="-1"><a class="header-anchor" href="#两种实现" aria-hidden="true">#</a> 两种实现</h2><p>首先我们来说一下两种方法各自的优缺点：我们以 MySQL 和 Redis 为例。</p><h3 id="直接写入数据库" tabindex="-1"><a class="header-anchor" href="#直接写入数据库" aria-hidden="true">#</a> 直接写入数据库</h3><p><strong>优点：</strong> 这种方法实现简单，只需完成数据库的增删改查就行；</p><p><strong>缺点：</strong> 数据库读写压力大，如果遇到热门文章在短时间内被大量点赞的情况，直接操作数据库会给数据库带来巨大压力，影响效率。</p><h3 id="使用-redis-缓存" tabindex="-1"><a class="header-anchor" href="#使用-redis-缓存" aria-hidden="true">#</a> 使用 Redis 缓存</h3><p><strong>优点：</strong> 性能高，读写速度快，缓解数据库读写的压力；</p><p><strong>缺点：</strong> 开发复杂，不能保证数据安全性即redis挂掉的时候会丢失数据， 同时不及时同步redis中的数据， 可能会在 redis 内存置换的时候被淘汰掉。不过对于点赞数据我们不需要那么精确，丢失一点数据问题不大。</p><h2 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h2><p>接下来就从以下三个方面对点赞功能做详细的介绍</p><ul><li>Redis 缓存设计</li><li>数据库设计</li><li>开启定时任务持久化存储到数据库</li></ul><h3 id="redis-缓存设计及实现" tabindex="-1"><a class="header-anchor" href="#redis-缓存设计及实现" aria-hidden="true">#</a> Redis 缓存设计及实现</h3><blockquote><p>Redis 的整合我们在上一篇文章中已经介绍过了，此处就不再赘述了。</p></blockquote><p>我们了解到，我们在做点赞的时候需要记录以下几类数据：一类是某用户被其他用户点赞的详细记录，一类是考虑到查询与存取方便快捷，我这边采用 Hash 结构进行存储，存储结构如下：</p><p>（1）某用户被其他用户点赞的详细记录：<code>MAP_USER_LIKED</code>为键值，<code>被点赞用户id::点赞用户id</code>为filed，<code>1或者0</code>为value</p><p>（2）某用户被点赞的数量统计：<code>MAP_USER_LIKED_COUNT</code>为键值，<code>被点赞用户id</code>为filed，<code>count</code>为value</p><p><strong>部分代码如下：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* 将用户被其他用户点赞的数据存到redis
*/</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveLiked2Redis</span><span class="token punctuation">(</span><span class="token class-name">String</span> likedUserId<span class="token punctuation">,</span> <span class="token class-name">String</span> likedPostId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">RedisKeyUtils</span><span class="token punctuation">.</span><span class="token function">getLikedKey</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">,</span> likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">RedisKeyUtils</span><span class="token punctuation">.</span><span class="token constant">MAP_KEY_USER_LIKED</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span> <span class="token class-name">LikedStatusEnum</span><span class="token punctuation">.</span><span class="token constant">LIKE</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//取消点赞</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlikeFromRedis</span><span class="token punctuation">(</span><span class="token class-name">String</span> likedUserId<span class="token punctuation">,</span> <span class="token class-name">String</span> likedPostId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">RedisKeyUtils</span><span class="token punctuation">.</span><span class="token function">getLikedKey</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">,</span> likedPostId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">RedisKeyUtils</span><span class="token punctuation">.</span><span class="token constant">MAP_KEY_USER_LIKED</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token class-name">LikedStatusEnum</span><span class="token punctuation">.</span><span class="token constant">UNLIKE</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* 将被点赞用户的数量+1
*/</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incrementLikedCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> likedUserId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token class-name">RedisKeyUtils</span><span class="token punctuation">.</span><span class="token constant">MAP_KEY_USER_LIKED_COUNT</span><span class="token punctuation">,</span>likedUserId<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//-1</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrementLikedCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> likedUserId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token class-name">RedisKeyUtils</span><span class="token punctuation">.</span><span class="token constant">MAP_KEY_USER_LIKED_COUNT</span><span class="token punctuation">,</span> likedUserId<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* 获取Redis中的用户点赞详情记录
*/</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserLikeDetail</span><span class="token punctuation">&gt;</span></span> <span class="token function">getLikedDataFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Cursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> scan <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token class-name">RedisKeyUtils</span><span class="token punctuation">.</span><span class="token constant">MAP_KEY_USER_LIKED</span><span class="token punctuation">,</span> <span class="token class-name">ScanOptions</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserLikeDetail</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;::&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> likedUserId <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> likedPostId <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//组装成 UserLike 对象</span>
        <span class="token class-name">UserLikeDetail</span> userLikeDetail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserLikeDetail</span><span class="token punctuation">(</span>likedUserId<span class="token punctuation">,</span> likedPostId<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userLikeDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//存到 list 后从 Redis 中删除</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">RedisKeyUtils</span><span class="token punctuation">.</span><span class="token constant">MAP_KEY_USER_LIKED</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* 获取Redis中的用户被点赞数量
*/</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserLikCountDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">getLikedCountFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Cursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> cursor <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token class-name">RedisKeyUtils</span><span class="token punctuation">.</span><span class="token constant">MAP_KEY_USER_LIKED_COUNT</span><span class="token punctuation">,</span> <span class="token class-name">ScanOptions</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserLikCountDTO</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserLikCountDTO</span> userLikCountDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserLikCountDTO</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userLikCountDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//存到 list 后从 Redis 中删除</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">RedisKeyUtils</span><span class="token punctuation">.</span><span class="token constant">MAP_KEY_USER_LIKED_COUNT</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Redis存储结构如图</strong></p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd6b13cfc51c435884f662fd9586d0bf~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcccd73d71fd4684b90fc9a0aeb4a6b6~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="数据库设计" tabindex="-1"><a class="header-anchor" href="#数据库设计" aria-hidden="true">#</a> 数据库设计</h3><p>这里我们可以和直接将点赞数据存到数据库一样，设计两张表：</p><p>(1)用户被其他用户点赞的详细记录:user_like_detail</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DROP TABLE IF EXISTS \`user_like_detail\`;
CREATE TABLE \`user_like_detail\`  (
  \`id\` int(11) NOT NULL AUTO_INCREMENT,
  \`liked_user_id\` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT &#39;被点赞的用户id&#39;,
  \`liked_post_id\` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT &#39;点赞的用户id&#39;,
  \`status\` tinyint(1) NULL DEFAULT 1 COMMENT &#39;点赞状态，0取消，1点赞&#39;,
  \`create_time\` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT &#39;创建时间&#39;,
  \`update_time\` timestamp(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0) COMMENT &#39;修改时间&#39;,
  PRIMARY KEY (\`id\`) USING BTREE,
  INDEX \`liked_user_id\`(\`liked_user_id\`) USING BTREE,
  INDEX \`liked_post_id\`(\`liked_post_id\`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = &#39;用户点赞表&#39; ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(2)用户被点赞的数量统计:user_like_count</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DROP TABLE IF EXISTS \`user_like_count\`;
CREATE TABLE \`user_like_count\`  (
  \`id\` int(11) NOT NULL AUTO_INCREMENT,
  \`like_num\` int(11) NULL DEFAULT 0,
  PRIMARY KEY (\`id\`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="开启定时任务持久化存储到数据库" tabindex="-1"><a class="header-anchor" href="#开启定时任务持久化存储到数据库" aria-hidden="true">#</a> 开启定时任务持久化存储到数据库</h3><p>我们使用 Quartz 来实现定时任务，将 Redis 中的数据存储到数据库中，为了演示效果，我们可以设置一分钟或者两分钟存储一遍数据，这个视具体业务而定。在同步数据的过程中，我们首先要将 Redis 中的数据在数据库中进行查重，舍弃重复数据，这样我们的数据才会更加准确。</p><p><strong>部分代码如下</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//同步redis的用户点赞数据到数据库</span>
<span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transLikedFromRedis2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserLikeDetail</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> redisService<span class="token punctuation">.</span><span class="token function">getLikedDataFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token comment">//查重</span>
        <span class="token class-name">UserLikeDetail</span> userLikeDetail <span class="token operator">=</span> userLikeDetailMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserLikeDetail</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
           <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserLikeDetail</span><span class="token operator">::</span><span class="token function">getLikedUserId</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getLikedUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
           <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserLikeDetail</span><span class="token operator">::</span><span class="token function">getLikedPostId</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getLikedPostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userLikeDetail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            userLikeDetail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserLikeDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> userLikeDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//没有记录，直接存入</span>
            userLikeDetail<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            userLikeDetailMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>userLikeDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment">//有记录，需要更新</span>
            userLikeDetail<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            userLikeDetail<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            userLikeDetailMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transLikedCountFromRedis2DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserLikCountDTO</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> redisService<span class="token punctuation">.</span><span class="token function">getLikedCountFromRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token class-name">UserLikeCount</span> user <span class="token operator">=</span> userLikeCountMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//点赞数量属于无关紧要的操作，出错无需抛异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Integer</span> likeNum <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getLikeNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            user<span class="token punctuation">.</span><span class="token function">setLikeNum</span><span class="token punctuation">(</span>likeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//更新点赞数量</span>
            userLikeCountMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此我们就实现了基于 Redis 的点赞功能，我们还需要注意一点：查询用户点赞情况时，需要同时查询数据库+缓存中的数据。</p>`,34),c=[e];function o(i,l){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","基于 Redis 实现点赞功能.html.vue"]]);export{k as default};
