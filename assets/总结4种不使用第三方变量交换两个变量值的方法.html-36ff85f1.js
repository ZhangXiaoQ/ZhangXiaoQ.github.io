import{_ as n,W as a,X as s,a2 as p}from"./framework-a9f5de78.js";const t={},o=p('<p>哈喽，大家好，我是阿Q。前几天有个小伙伴去面试，被面试官的一个问题劝退了：请说出几种不使用第三方变量交换两个变量值的方法。</p><p>问题有点绕，好不容易缕清了面试官的问题，却发现答不上来。一时间尴尬无比，只能硬着头皮说不会。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5adfa97f80f4451485f863112f4e2b38~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>遇到交换变量值的问题，通常我们的做法是：定义一个新的变量，借助它完成交换。</p><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>t <span class="token operator">=</span> a<span class="token punctuation">;</span>\na <span class="token operator">=</span> b<span class="token punctuation">;</span> \nb <span class="token operator">=</span> t<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但问题的重点是“不使用第三方变量”，那就变得“可爱”起来了。思考过后，抛出以下四种方法来解决该问题：</p><ul><li>变量本身交换数值；</li><li>算术运算；</li><li>指针地址操作；</li><li>位运算；</li></ul><h3 id="变量本身交换数值" tabindex="-1"><a class="header-anchor" href="#变量本身交换数值" aria-hidden="true">#</a> 变量本身交换数值</h3><p><code>b = (a + b) - (a = b);</code></p><p>首先执行 a + b 操作，然后将 b 赋值给 a，则 <code>b = a + b - b = a</code>，这就完成了 ab 的互换操作。</p><h3 id="算术运算" tabindex="-1"><a class="header-anchor" href="#算术运算" aria-hidden="true">#</a> 算术运算</h3><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06ccf60c82164840bc0135cde9487f9e~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图所示： OA = a; OB = b; AB = b - a;</p><p>首先我们把 AB 之间的距离 b - a 赋值给 a，此时 AB = a, OB = b 。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2e51e24611b459a954259a71ae9d587~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于要达到 ab 交换的目的，所以 OA 要等于 b，而此时 OA 的距离为 b - a ，所以得将 b - a 赋值给 b ，此时 OA = b， AB = a 。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d019413ae24144f78fbb8eac4e3d32eb~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>很容易从图中看出，OB 的距离为 b + a，所以我们只需要将 b + a 赋值给 a 就可以完成两者的交换了。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24a5786638f04483831816991792b4ae~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>综上所述，我们的步骤为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>\na <span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment">//b=15;a=5;</span>\nb <span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment">//b=10;a=5;</span>\na <span class="token operator">=</span> b <span class="token operator">+</span> a<span class="token punctuation">;</span> <span class="token comment">//b=10;a=15;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>该算法只能用于整型类型。</p></blockquote><h3 id="指针地址操作" tabindex="-1"><a class="header-anchor" href="#指针地址操作" aria-hidden="true">#</a> 指针地址操作</h3><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3c64f61061b4f1ba379f4ef95aa3ef3~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们可以把 a 和 b 想象为内存中的地址值，假设 a 为 <code>0x01ff5e70</code> ，b 为 <code>0x01ff5e90</code> ，而 b - a 表示两个变量在内存中的储存位置隔了多少个字节。所以我们<strong>理论上</strong>也可以按<strong>算术运算</strong>的逻辑来交换两个变量的值。</p><p><strong>代码如下（此处是 c 语言）：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//其中 a 和 b 都是指针变量，里边存储着10和20的地址</span>\n<span class="token keyword">int</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//a=0x01ff5e70 ，此处代表a中存储的地址</span>\n<span class="token keyword">int</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//b=0x01ff5e90 ，此处代表b中存储的地址</span>\n\n<span class="token comment">//指针变量相减得到20和10的地址间隔了多少个字节，然后转为指针变量</span>\na <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">//b=0x01ff5e90;a=0x8</span>\nb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">//b=0x01ff5e70;a=0x8</span>\na<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token keyword">long</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b=0x01ff5e70;a=0x01ff5e90</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>b - a = 0x01ff5e90 - 0x01ff5e70 = 0x20，0x20 转换为十进制为 32 位，因为一个 int 占4位，所以这里是 0x8 。</p></blockquote><p>以上只是理论状态下的执行过程，如果直接执行是不能实现交换的。因为上边的代码忽略了一个问题：代码编译之后，变量都是存在内存中的，而内存区都会存在基地址。</p><p>基地址可以理解为某块内存的起点。上边的数据都是在基地址的基础上做了偏移。</p><blockquote><p>变量的地址 = 变量的基地址 + 变量的偏移地址</p></blockquote><p>当我们进行 b - a 操作的时候，得到结果为 8 ，然后转化为指针变量的时候就会给 8 自动添加基地址，此时的结果就不是 0x8 了，所以会导致结果错误。</p><p>另外，地址运算不能出现负数，即当 a 的地址大于 b 的地址时，b - a &lt; 0 ，系统自动采用补码的形式表示负的位移，也会产生错误。</p><p>为了解决这个问题，我们只需要保证 b - a 得到的结果不受基地址的影响即可，所以给出以下解决方案。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \ncout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;`````&quot;</span><span class="token punctuation">;</span>\ncout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;`````&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n	a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> \n	cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;`````&quot;</span><span class="token punctuation">;</span>\n\n	b<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x0000ffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n	cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;`````&quot;</span><span class="token punctuation">;</span>\n	\n	a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token keyword">long</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n	cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;`````&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n	b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> \n	cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;`````&quot;</span><span class="token punctuation">;</span>\n\n	a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x0000ffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n	cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;`````&quot;</span><span class="token punctuation">;</span>\n	\n	b<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token keyword">long</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n	cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;`````&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行结果:</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>0x8dbe70`````0x8dbe90`````0x8`````0x8dbe70`````0x8dbe90`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看到这，不知道大家是否真的看懂了。反正我第一次看到这儿时，感觉非常清晰（<strong>其实完全没有理解</strong>），第二次看的时候懵逼了，完全不懂，所以还得大家仔细思考一下才行。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc97fb0e876d47ad85915706305aac9f~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>b=(int*)(b-(long(a)&amp;0x0000ffff));</code> 指令的精妙之处就在于采用了<strong>位运算</strong>中的<strong>与运算</strong>，将 a 和 <code>0x0000ffff</code> 进行与运算后，b - a 的基地址计算结果被屏蔽，只保留了偏移地址的计算结果，也就是我们需要的字节数。</p><blockquote><p>在交换很大的数据类型时，该方法执行速度比算术算法快。因为它交换的是地址，而变量值在内存中是没有移动过的。</p></blockquote><h3 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h3><p>既然上边用到了位运算，那我们再说一种直接通过“<strong>异或</strong>“完成交换的方法。</p><p>简单介绍一下异或的规则：</p><ul><li>如果a、b两个值不相同，则异或结果为1；</li><li>如果a、b两个值相同，异或结果为0。</li></ul><p><strong>代码如下</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//二进制：a=1010;b=1100;</span>\na <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span><span class="token comment">//a=0110;b=1100</span>\nb <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span><span class="token comment">//a=0110;b=1010</span>\na <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span><span class="token comment">//a=1100;b=1010</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a=&quot;</span><span class="token operator">+</span> a <span class="token operator">+</span><span class="token string">&quot;,b=&quot;</span><span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>a=12,b=10\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>异或运算能够使数据中的某些位翻转，其他位不变。这就意味着任意一个数与任意一个给定的值连续<strong>异或两次</strong>，值不变。</p><h3 id="简单总结" tabindex="-1"><a class="header-anchor" href="#简单总结" aria-hidden="true">#</a> 简单总结</h3><p>以上四种方法均实现了不借助第三方变量来完成两个变量值的交换：</p><ul><li>算术运算和位运算计算量相当，只能进行整形数据的交换；</li><li>地址运算中计算较复杂，可以很轻松的实现大类型（比如自定义的类或结构）的交换；</li><li>理论上重载 “^” 运算符，也可以实现任意结构的交换；</li></ul>',54),e=[o];function c(l,i){return a(),s("div",null,e)}const r=n(t,[["render",c],["__file","总结4种不使用第三方变量交换两个变量值的方法.html.vue"]]);export{r as default};
