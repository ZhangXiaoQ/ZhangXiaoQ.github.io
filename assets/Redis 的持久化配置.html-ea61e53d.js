import{_ as e,W as d,X as o,a2 as c}from"./framework-a9f5de78.js";const a={},i=c(`<p>前边我们已经介绍了<code>Redis</code><strong>五种数据类型的命令</strong>与<strong>配置文件的基本配置</strong>，今天让我们从理论和配置两个层面来揭开<code>Redis</code>持久化的神秘面纱。</p><p>所谓持久化可以简单理解为将内存中的数据保存到硬盘上存储的过程。持久化之后的数据在系统重启或者宕机之后依然可以进行访问，保证了数据的安全性。</p><p><code>Redis</code>有两种持久化方案，一种是快照方式（<code>SNAPSHOTTING</code>），简称<code>RDB</code>；一种是只追加模式（<code>APPEND ONLY MODE</code>），称为AOF。接下来让我们分别了解一下它们的使用与注意事项。</p><h2 id="rdb" tabindex="-1"><a class="header-anchor" href="#rdb" aria-hidden="true">#</a> RDB</h2><p><code>RDB</code>为<code>Redis DataBase</code>的缩写，是 <code>Redis</code> 默认的持久化方案。它能够在指定的时间间隔内将内存数据集快照（<code>snapshot</code>）写入磁盘，恢复时将快照文件（ <code>dump.rdb</code> ）读回内存。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/babd3ae9f00641ada0f8e41c6d755110~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们先来扒一下配置文件中的<code>SNAPSHOTTING</code>:</p><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h3><h4 id="save-seconds-changes" tabindex="-1"><a class="header-anchor" href="#save-seconds-changes" aria-hidden="true">#</a> save <code>&lt;seconds&gt; &lt;changes&gt;</code></h4><p>在给定的<strong>秒数</strong>内，如果对数据库执行的<strong>写入操作数</strong>达到设定的值，则将数据同步到数据文件。支持多个条件配合，<code>Redis</code>默认配置文件中提供了三个条件：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>save 900 1	//900s内有1个更改
save 300 10	//300s内有10个更改
save 60 10000	//60s内有10000次更改
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：若不想用<code>RDB</code>方案，可以把 <code>save &quot;&quot; </code>的注释打开，上边三个注释掉。</p><h4 id="stop-writes-on-bgsave-error-yes" tabindex="-1"><a class="header-anchor" href="#stop-writes-on-bgsave-error-yes" aria-hidden="true">#</a> stop-writes-on-bgsave-error yes</h4><p>当<code>bgsave</code>出现错误时，<code>Redis</code>是否停止执行写命令；</p><ul><li>如果为<code>yes</code>，则当硬盘出现问题时，<code>Redis</code>将停止接受写入操作，这样我们可以及时发现，避免数据的大量丢失；</li><li>如果为<code>no</code>，则<code>Redis</code>无视<code>bgsave</code>的错误继续执行写命令。</li></ul><blockquote><p>如果已经设置了对<code>Redis</code>服务器的正确监视和持久性，即采用了其他手段发现和控制数据完整性，可能希望禁用此功能，以便即使在磁盘、权限等方面出现问题时，<code>Redis</code>仍能正常工作。</p></blockquote><p><strong>注意</strong>：如果后台保存过程将再次开始工作，<code>Redis</code>将自动允许再次写入。</p><h4 id="rdbcompression-yes" tabindex="-1"><a class="header-anchor" href="#rdbcompression-yes" aria-hidden="true">#</a> rdbcompression yes</h4><p>指定存储到本地数据库时是否<strong>压缩</strong>（<code>Redis</code>采用<code>LZF</code>压缩）数据，默认为<code>yes</code>。如果为了节省<code>CPU</code>时间，可以关闭该选项，但会导致数据库文件变得巨大。</p><h4 id="rdbchecksum-yes" tabindex="-1"><a class="header-anchor" href="#rdbchecksum-yes" aria-hidden="true">#</a> rdbchecksum yes</h4><p>从<code>RDB</code>版本<code>5</code>开始，在存储快照后，还可以使用<code>CRC64</code>算法来进行数据校验，<code>CRC64</code>校验放在文件的末尾。开启之后，保存和加载<code>RDB</code>文件时会增加大约<code>10%</code>的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。</p><p>禁用<strong>校验和</strong>创建的<code>RDB</code>文件的校验和为零，这将告诉加载代码跳过检查。</p><h4 id="dbfilename-dump-rdb" tabindex="-1"><a class="header-anchor" href="#dbfilename-dump-rdb" aria-hidden="true">#</a> dbfilename dump.rdb</h4><p>指定本地数据库文件名，重启之后自动加载进<strong>内存</strong>，手动执行<code>save</code> 命令的话即刻生效。</p><blockquote><p><strong>大坑请注意</strong>：<code>flushall</code>、<code>shutdown</code>命令都会清空并提交至<code>dump.rdb</code></p></blockquote><h4 id="dir" tabindex="-1"><a class="header-anchor" href="#dir" aria-hidden="true">#</a> dir ./</h4><p>指定本地数据库存放目录。</p><h3 id="理论" tabindex="-1"><a class="header-anchor" href="#理论" aria-hidden="true">#</a> 理论</h3><h4 id="工作方式" tabindex="-1"><a class="header-anchor" href="#工作方式" aria-hidden="true">#</a> 工作方式</h4><ul><li>当 <code>Redis</code> 需要保存<code>dump.rdb</code>文件时，它会调用系统函数<code>fork()</code>，创建一个子进程（与主进程完全一致）;</li><li>子进程将数据集写入临时文件<code>RDB</code>中；</li><li>当子进程完成对新 <code>RDB</code> 文件的写入时，<code>Redis</code> 用新 <code>RDB</code> 文件替换原来的 <code>RDB</code> 文件，并删除旧的 <code>RDB</code> 文件。</li></ul><p>这种工作方式使得 <code>Redis</code> 可以从写时复制（<code>copy-on-write</code>）机制中获益。</p><h4 id="如何触发rdb快照" tabindex="-1"><a class="header-anchor" href="#如何触发rdb快照" aria-hidden="true">#</a> 如何触发RDB快照</h4><ol><li>配置文件中默认的快照配置；</li><li>命令<code>save</code>（阻塞， 只管保存快照，其他的等待）或者是<code>bgsave</code>（异步）命令，快照同时还可以响应客户端命令；</li><li>执行<code>flushall</code> 命令，清空数据库所有数据，意义不大;</li><li>执行<code>shutdown</code> 命令，保证服务器正常关闭且不丢失任何数据，意义也不大。</li></ol><h4 id="通过rdb文件恢复数据" tabindex="-1"><a class="header-anchor" href="#通过rdb文件恢复数据" aria-hidden="true">#</a> 通过RDB文件恢复数据</h4><p>在实际开发中，一般会考虑到物理机硬盘损坏的情况，所以我们会选择备份<code>dump.rdb</code>文件。将备份的<code>dump.rdb</code> 文件拷贝到<code>redis</code>的安装目录的<code>bin</code>目录下，重启<code>redis</code>服务即可。</p><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ul><li><code>RDB</code>是一个非常紧凑的文件，非常适用于数据集的备份；</li><li><code>RDB</code>是一个紧凑的单一文件，很方便传送到另一个远端数据中心或者亚马逊的S3（可能加密），非常适用于灾难恢复；</li><li><code>Redis</code>的主进程不进行<code>I/O</code>操作，确保了极高的性能；</li><li>适合大规模数据的恢复，对于数据的完整性和一致性要求不高的话，<code>RDB</code>比<code>AOF</code>方式更加高效。</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><ul><li>在<code>Redis</code>意外宕机时，你可能会丢失几分钟的数据；</li><li><code>RDB</code> 需要经常<code>fork</code>子进程来保存数据集到硬盘上，当数据集比较大的时候，<code>fork</code>的过程是非常耗时的，可能会导致<code>Redis</code>在一些毫秒级内不能响应客户端的请求。如果数据集巨大并且<code>CPU</code>性能不是很好的情况下，这种情况会持续1秒；<code>AOF</code>也需要<code>fork</code>，但是可以调节重写日志文件的频率来提高数据集的耐久度。</li></ul><h2 id="aof" tabindex="-1"><a class="header-anchor" href="#aof" aria-hidden="true">#</a> AOF</h2><p>为了解决<code>RDB</code>方式在宕机时丢失数据过多的问题，从<code>1.1</code> 版本开始，<code>Redis</code>增加了一种<code>durable</code>的持久化方式：<code>AOF</code>。</p><p><code>AOF</code>是<code>Append Only File</code>的缩写，默认不开启。<code>AOF</code>以日志的形式来记录每个写操作，只允许追加文件但不可以改写文件，当服务器重启的时候会重新执行这些命令来恢复原始的数据。</p><p>我们再来看一下配置文件中的<code>APPEND ONLY MODE</code>:</p><h3 id="配置文件-1" tabindex="-1"><a class="header-anchor" href="#配置文件-1" aria-hidden="true">#</a> 配置文件</h3><h4 id="appendonly-no" tabindex="-1"><a class="header-anchor" href="#appendonly-no" aria-hidden="true">#</a> appendonly no</h4><p>默认为关闭状态，改为<code>yes</code>打开持久化。<code>AOF</code>和<code>RDB</code>可以同时启用而不会出现问题。</p><h4 id="appendfilename-appendonly-aof" tabindex="-1"><a class="header-anchor" href="#appendfilename-appendonly-aof" aria-hidden="true">#</a> appendfilename &quot;appendonly.aof&quot;</h4><p>文件默认名称，启动即创建。加载<strong>先于</strong><code>dump.rdb</code>文件</p><h4 id="appendfsync" tabindex="-1"><a class="header-anchor" href="#appendfsync" aria-hidden="true">#</a> appendfsync</h4><p>同步策略：系统函数<code>fsync()</code> 告诉操作系统在磁盘上实际写入数据。<code>Redis</code>支持三种不同的模式</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>appendfsync always	//每次发生数据变更会被立即记录到磁盘，性能较差但数据完整性比较好
appendfsync everysec	//默认推荐，异步操作，每秒记录，如果宕机，有1秒内数据丢失
appendfsync no	//不同步，只有在操作系统需要时在刷新数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要想了解接下来的配置内容，先得说一下“日志重写”的原理：</p><h4 id="重写" tabindex="-1"><a class="header-anchor" href="#重写" aria-hidden="true">#</a> 重写</h4><p>由于<code>AOF</code>采用的是将命令追加到文件末尾的方式，所以随着写入命令的不断增加，<code>AOF</code>文件的体积会变得越来越大。为避免出现此种情况，新增了重写机制：可以在不打断服务客户端的情况下，对<code>AOF</code>文件进行重建（<code>rebuild</code>）。</p><p><strong>重写触发：</strong> 通过执行<code>bgrewriteaof</code>命令，可以生成一个新的<code>AOF</code>文件，该文件包含重建当前数据集所需的<strong>最少</strong>命令。<code>Redis 2.2</code>需手动执行该命令，<code>Redis 2.4</code>则可以通过修改配置文件的方式自动触发（配置在下边涉及）。</p><p><strong>重写原理：</strong></p><ul><li><code>Redis</code> 执行系统函数<code>fork()</code> ，创建一个子进程（与主进程完全一致）；</li><li>子进程开始将新 <code>AOF</code> 文件的内容写入到临时文件；</li><li>对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 <code>AOF</code> 文件的末尾，这样即使在重写的中途发生停机，现有的 <code>AOF</code> 文件也是安全的；</li><li>当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 <code>AOF</code> 文件的末尾。</li><li><code>Redis</code> 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 <code>AOF</code>文件的末尾。</li></ul><h4 id="no-appendfsync-on-rewrite-no" tabindex="-1"><a class="header-anchor" href="#no-appendfsync-on-rewrite-no" aria-hidden="true">#</a> no-appendfsync-on-rewrite no</h4><p>当我们同时执行主进程的<strong>写操作</strong>和子进程的<strong>重写</strong>操作时，两者都会操作磁盘，而重写往往会涉及到大量的磁盘操作，这样就会造成主进程在写<code>aof</code>文件的时候出现阻塞的情形。</p><p>为了解决这个问题，<code>no-appendfsync-on-rewrite</code>参数出场了。</p><ul><li>如果该参数设置为<code>no</code>，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题；</li><li>如果设置为<code>yes</code>，这就相当于将<code>appendfsync</code>设置为<code>no</code>，这说明并没有执行磁盘操作，只是写入了缓冲区。因此这样并不会造成阻塞（因为没有竞争磁盘），但是如果这个时候<code>redis</code>挂掉，就会丢失数据。丢失多少数据呢？在<code>linux</code>的操作系统的默认设置下，最多会丢失30s的数据。</li></ul><p>因此，如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为<code>yes</code>；如果应用系统无法忍受数据丢失，则设置为<code>no</code>。</p><h4 id="auto-aof-rewrite-percentage-100" tabindex="-1"><a class="header-anchor" href="#auto-aof-rewrite-percentage-100" aria-hidden="true">#</a> auto-aof-rewrite-percentage 100</h4><p>重写百分比，默认为上次重写后<code>aof</code>文件大小的一倍。</p><h4 id="auto-aof-rewrite-min-size-64mb" tabindex="-1"><a class="header-anchor" href="#auto-aof-rewrite-min-size-64mb" aria-hidden="true">#</a> auto-aof-rewrite-min-size 64mb</h4><p>重写触发的最小值：64mb。</p><p>根据<code>auto-aof-rewrite-min-size</code>和<code>auto-aof-rewrite-percentage</code>参数确定自动触发时机。<code>Redis</code>会记录上次重写时的<code>AOF</code>大小，默认配置是当<code>AOF</code>文件大小是上次<code>rewrite</code>后大小的一倍且文件大于<code>64M</code>时触发。</p><blockquote><p>大型互联网公司一般都是<code>3G</code>起步</p></blockquote><h4 id="aof-load-truncated-yes" tabindex="-1"><a class="header-anchor" href="#aof-load-truncated-yes" aria-hidden="true">#</a> aof-load-truncated yes</h4><p>当<code>AOF</code>文件被截断时，即<code>AOF</code>文件的最后命令不完整，如果此时启动<code>Redis</code>，会将<code>AOF</code>数据加载回内存，此时便会出现问题。</p><ul><li>yes：加载一个截断的<code>AOF</code>，<code>Redis</code>服务器开始发出日志，通知用户该事件；</li><li>no：服务器将中止并出现错误，拒绝启动。</li></ul><p>当我们得知<code>AOF</code>文件报错时，可以用以下方法来修复出错的 <code>AOF</code> 文件：</p><ul><li><p>为现有的 <code>AOF</code>文件创建一个备份；</p></li><li><p>使用 <code>Redis</code> 附带的 <code>redis-check-aof</code> 命令，对原来的<code>AOF</code>文件进行修复；</p><ul><li><p><code>redis-check-aof –fix</code></p></li><li><p><code>redis-check-aof --fix appendonly.aof</code> 修复命令，杀光不符合规范的语法</p></li></ul></li><li><p>（<strong>可选</strong>）使用 <code>diff -u</code> 对比修复后的 <code>AOF </code>文件和原始 <code>AOF</code> 文件的备份，查看两个文件之间的不同之处；</p></li><li><p>重启 <code>Redis</code>服务器，等待服务器载入修复后的 <code>AOF </code>文件，并进行数据恢复。</p></li></ul><h4 id="aof-use-rdb-preamble-yes" tabindex="-1"><a class="header-anchor" href="#aof-use-rdb-preamble-yes" aria-hidden="true">#</a> aof-use-rdb-preamble yes</h4><p>在重写<code>AOF</code>文件时，<code>Redis</code>能够在<code>AOF</code>文件中使用<code>RDB</code>前导，以加快重写和恢复速度。启用此选项后，重写的<code>AOF</code>文件由两个不同的节组成：<code>RDB file</code>、<code>AOF tail</code></p><p>加载<code>Redis</code>时，会识别<code>AOF</code>文件以<strong>Redis</strong>字符串开头，并加载带前缀的<code>RDB</code>文件，然后继续加载<code>AOF</code>尾部。</p><h3 id="理论-1" tabindex="-1"><a class="header-anchor" href="#理论-1" aria-hidden="true">#</a> 理论</h3><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1" aria-hidden="true">#</a> 优点</h4><ul><li>数据的完整性和一致性更高，<code>AOF</code>的持久化通过使用不同的策略，最多丢失1秒的数据；</li><li><code>AOF</code>文件是一个只进行追加的日志文件，不需要写入<code>seek</code>；</li><li><code>Redis</code>可以在 <code>AOF </code>文件体积变得过大时，自动地在后台对 <code>AOF</code> 进行重写，重写操作是绝对安全的；</li><li><code>AOF</code>文件记录的写入操作以<code>Redis</code>协议的格式保存，容易读懂，容易对文件进行分析；</li></ul><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a> 缺点</h4><ul><li>对于相同的数据集来说，<code>AOF</code>文件的体积通常要大于<code>RDB</code>文件的体积；</li><li>根据所使用的 <code>fsync</code> 策略，<code>AOF</code>的速度可能会慢于<code>RDB</code> 。</li></ul><blockquote><p>在一般情况下，每秒 <code>fsync</code> 的性能依然非常高，而关闭 <code>fsync</code> 可以让 <code>AOF</code> 的速度和 <code>RDB</code> 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，<code>RDB</code> 可以提供更有保证的最大延迟时间（<code>latency</code>）。</p></blockquote><h2 id="对比与总结" tabindex="-1"><a class="header-anchor" href="#对比与总结" aria-hidden="true">#</a> 对比与总结</h2><h3 id="如何选择使用哪种持久化方式" tabindex="-1"><a class="header-anchor" href="#如何选择使用哪种持久化方式" aria-hidden="true">#</a> 如何选择使用哪种持久化方式？</h3><p>一般来说，如果想达到足以媲美 <code>PostgreSQL</code> 的数据安全性，应该同时使用两种持久化功能。</p><p>如果非常关心数据，但仍然可以承受数分钟以内的数据丢失，那么可以只使用 <code>RDB</code> 持久化。</p><p>由于AOF持久化的实时性更好，即当进程意外退出时丢失的数据更少，因此<code>AOF</code>是目前<strong>主流</strong>的持久化方式。</p><p>有很多用户都只使用<code>AOF</code>持久化，但我们并不推荐这种方式：因为定时生成 <code>RDB</code> 快照（<code>snapshot</code>）非常便于进行数据库备份，并且 <code>RDB</code> 恢复数据集的速度也要比 <code>AOF</code> 恢复的速度要快。</p><h3 id="aof和rdb之间的相互作用" tabindex="-1"><a class="header-anchor" href="#aof和rdb之间的相互作用" aria-hidden="true">#</a> AOF和RDB之间的相互作用</h3><p>在版本号大于等于 <code>2.4</code> 的 <code>Redis</code> 中，<code>BGSAVE</code> 执行的过程中，不可以执行 <code>BGREWRITEAOF</code> 。反过来说，在 <code>BGREWRITEAOF</code> 执行的过程中，也不可以执行 <code>BGSAVE</code>。这可以防止两个 <code>Redis</code> 后台进程同时对磁盘进行大量的<code> I/O</code> 操作。</p><p>如果 <code>BGSAVE</code> 正在执行，并且用户显示地调用 <code>BGREWRITEAOF</code> 命令，那么服务器将向用户回复一个 <code>OK</code> 状态， 并告知用户<code>BGREWRITEAOF</code> 已经被预定执行：一旦 <code>BGSAVE</code> 执行完毕，<code>BGREWRITEAOF </code>就会正式开始。</p><p>当 <code>Redis</code> 启动时，如果 <code>RDB</code>持久化和 <code>AOF</code> 持久化都被打开了， 那么程序会优先使用 <code>AOF</code> 文件来恢复数据集，因为 <code>AOF </code>文件所保存的数据通常是最完整的。</p><h3 id="备份redis数据" tabindex="-1"><a class="header-anchor" href="#备份redis数据" aria-hidden="true">#</a> 备份redis数据</h3><ul><li>创建一个定期任务（<code>cron job</code>），每小时将一个 <code>RDB</code> 文件备份到一个文件夹，并且每天将一个 <code>RDB</code> 文件备份到另一个文件夹；</li><li>确保快照的备份都带有相应的日期和时间信息，每次执行定期任务脚本时，使用 <code>find</code> 命令来删除过期的快照；</li><li>至少每天一次，将 <code>RDB</code> 备份到你的数据中心之外，或者至少是备份到你运行 <code>Redis</code> 服务器的物理机器之外。</li></ul><h3 id="性能建议" tabindex="-1"><a class="header-anchor" href="#性能建议" aria-hidden="true">#</a> 性能建议</h3><p>在实际应用时，因为<code>RDB</code>文件只用作后备用途，建议只在<code>slave</code>上持久化<code>RDB</code>文件，而且只需要15分钟备份一次就够了，只保留<code>save 900 1</code>这条规则。</p><p>如果开启<code>AOF</code>，好处是在最恶劣情况下也只会丢失不超过2秒数据，启动脚本较简单只<code>load</code>自己的<code>AOF</code>文件就可以了。代价一是带来了持续的<code>IO</code>，二是<code>AOF rewrite </code>的最后将<code>rewrite</code>过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。</p><p>只要硬盘许可，应该尽量减少<code>AOF rewrite</code>的频率，<code>AOF</code>重写的基础大小默认值<code>64M</code>太小了，可以设置到<code>5G</code>以上。默认超过原大小的100%时重写可以改到适当的数值。</p><p>如果不开启<code>AOF</code>，仅靠<code>Master-Slave Replication</code>实现高可用性也可以。能省掉一大笔<code>IO</code>，也减少了<code>rewrite</code>时带来的系统波动。代价是如果<code>Master/Slave </code>同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个<code>Master/Slave</code>中的<code>RDB</code>文件，载入较新的那个。</p>`,99),r=[i];function s(n,l){return d(),o("div",null,r)}const t=e(a,[["render",s],["__file","Redis 的持久化配置.html.vue"]]);export{t as default};
