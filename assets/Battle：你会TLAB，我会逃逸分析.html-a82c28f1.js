import{_ as n,W as s,X as a,a2 as p}from"./framework-a9f5de78.js";const e={},c=p(`<p>“噔噔噔…”传来一阵敲门声，把我从美梦中惊醒了。</p><p>朦胧间听到有人在说话“阿Q，在家不？”</p><p>“来了来了”，推门一看，原来是“赵信”兄弟。</p><p><strong>赵信</strong>：自称常山赵子龙，一把三爪长枪耍的虎虎生风，见人上去就是一枪，人送外号“菊花信”。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89c8bb05510a493082c09e4aff3ec21d~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br> \\</p><h3 id="tlab" tabindex="-1"><a class="header-anchor" href="#tlab" aria-hidden="true">#</a> <a href=""></a>TLAB</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c89461d3f854a55935381e4c7c53f08~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b089eac8da44ceab79cf2f896225366~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/866c7cbb5ede4624a3d88e6611617090~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66491edc305c4fcd923926c689d02141~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd467bb2d56d497ab00e0f82ee8e3622~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bbd9fbef3a042f791aafd0d72e20452~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a4686431daa646cab94866dcb8433dfc~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57c081ace6e54c3b8ee875141c258ab9~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e3cc3325e864d29bb8b82b789ee0849~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8997cb1dcd6847f7aed19eaa6534940f~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9192e2db0812488bbce7d6a3c0f5640a~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5dfb0dcd4ea74f869ee39792b4b2a05c~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/948757cd92bf43f4a25a5ded1e09f479~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><ul><li>尽管不是所有的对象实例都能够在<code>TLAB</code>中成功分配内存（因为它的空间比较小），但<code>JVM</code>明确是将<code>TLAB</code>作为内存分配的首选；</li><li>一旦对象在<code>TLAB</code>空间分配内存失败时，<code>JVM</code>就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在<code>Eden</code>空间中分配内存。<br> \\</li></ul><p><strong>参数设置</strong></p><ul><li><code>-XX:UseTLAB</code>：设置是否开启<code>TLAB</code>空间；</li><li><code>-XX:TLABWasteTargetPercent</code>：设置<code>TLAB</code>空间所占<code>Eden</code>空间的百分比大小，默认仅占<code>1%</code>;</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae6cfb9d7f734c9887ff5d8e66e7f0ed~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b68322832dda4a78a3aed306969271ad~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><h3 id="堆是分配对象的唯一选择吗" tabindex="-1"><a class="header-anchor" href="#堆是分配对象的唯一选择吗" aria-hidden="true">#</a> <a href=""></a>堆是分配对象的唯一选择吗？</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1894c8b40be54fcbbda0a1d73b44ef6d~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63669171524a4d56b25957be087c87fb~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4432131904a44955b629c7d4a654e9db~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0834612655ba44ffbf23982306131471~tplv-k3u1fbpfcp-watermark.image" alt="image.png" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/169804ae0bf74382a4866fe6d14e8b78~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><ol><li>如果经过逃逸分析（<code>Escape Analysis</code>)后发现，一个对象并没有逃逸出方法，那么就可能被优化为栈上分配。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</li><li>基于<code>OpenJDK</code>深度定制的<code>TaoBaoVM</code>，它创新的<code>GCIH(GCinvisible heap)</code>实现了堆外分配。将生命周期较长的<code>Java</code>对象从堆中移至堆外，并且<code>GC</code>不能管理<code>GCIH</code>内部的<code>Java</code>对象，以此达到降低GC的回收频率和提升<code>GC</code>的回收效率的目的。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ca8f838be314db9a09d8acf56b0be9d~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc77484ba12a4dd1bca574d60650bb69~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfa608217a1446f0907df4bd4ed97d41~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f4934e4ed8f4c0698b958f8a6a3461f~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><p><strong>举例一</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>user</code>对象在方法内部声明，且在内部置为<code>null</code>，未被方法外的方法所引用，我们就说<code>user</code>对象没有发生逃逸。</p><p>它<strong>可以</strong>分配到栈上，并随着方法的结束，栈空间也随之移除。</p><p><strong>举例二</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuffer</span> <span class="token function">createStringBuffer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span><span class="token class-name">String</span> s2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sb<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然<code>sb</code>对象在方法内部被定义，但是它又作为方法的返回对象，可被其它方法调用，我们就说<code>sb</code>对象发生了逃逸。</p><p>要想不发生逃逸，可以改造为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createStringBuffer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span><span class="token class-name">String</span> s2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6e4ddfdb692486ab71006a9dc33c059~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67ccf678083c4b8da5ae8d4cce109edd~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a24301dc48c45f8bc4071aae91303d0~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><p>在<code>JDK 6u23</code>版本之后，<code>HotSpot</code>中默认开启了逃逸分析。</p><ul><li><code>-XX:DoEscapeAnalysis</code>：显式开启逃逸分析</li><li><code>-XX:+PrintEscapeAnalysis</code>：查看逃逸分析的筛选结果</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/239e6bba1b5541bca377c3a2b1c5cb36~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70c2047a93e6442abcdb9df05f36de04~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a450a60687534386985d4e53a13b400f~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><h4 id="栈上分配" tabindex="-1"><a class="header-anchor" href="#栈上分配" aria-hidden="true">#</a> <a href=""></a>栈上分配</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8115c0203ee644dcb849460b6a522569~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2510ac66a5604aaf9193f6624e5a0e15~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 栈上分配测试
 * -Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackAllocation</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
       
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;花费的时间为： &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//为了方便查看堆内存中对象个数，线程sleep</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//未发生逃逸</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逃逸分析默认开启，也可以手动开启：<code>-XX:+DoEscapeAnalysis</code></p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff69a8f21dd545a490710244a77d0d73~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>关闭逃逸分析</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d65df4f9df474d83b295b4fa5cdc9aa5~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9084699b21a84c9196f90d27bd7073e3~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><h4 id="同步省略" tabindex="-1"><a class="header-anchor" href="#同步省略" aria-hidden="true">#</a> <a href=""></a>同步省略</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f62f1e8e1abc462f8729e452dd224c46~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebc43f9186e74af3b9465d4c1656cd90~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><p>我们都知道线程同步的代价是相当高的，同步的后果就是降低了并发性和性能。</p><p><code>JVM</code>为了提高性能，在动态编译同步块的时候，<code>JIT</code>编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问。</p><p>如果符合条件，那么<code>JIT</code>编译器在编译这个同步块的时候就会取消对这部分代码的同步。这个取消同步的过程就叫同步省略，也叫锁消除。</p><p><strong>举例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> code <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
    *代码中对code这个对象进行加锁，
    *但是code对象的生命周期只在method方法中
    *并不会被其他线程所访问控制，
    *所以在 JIT 编译阶段就会被优化掉。
    */</span>
    
    <span class="token comment">//优化为</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> code <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在解释执行时这里仍然会有锁，但是经过服务端编译器的即时编译之后，这段代码就会忽略所有的同步措施而直接执行。</p></blockquote><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/074e858f2cf14d1092671f0725ee43d0~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="标量替换" tabindex="-1"><a class="header-anchor" href="#标量替换" aria-hidden="true">#</a> <a href=""></a>标量替换</h4><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2af58a2bfa7e4f72abcf4f2129e23a02~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>标量：不可被进一步分解的量，如<code>JAVA</code>的基本数据类型就是标量；</li><li>聚合量：可以被进一步分解的量， 在<code>JAVA</code>中对象就是可以被进一步分解的聚合量。</li></ul><p>聚合量可以分解成其它标量和聚合量。</p><p>标量替换，又名分离对象，即在<code>JIT</code>阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过<code>JIT</code>优化，就会把这个对象拆解成若干个其中包含的成员变量来替代。</p><p><strong>举例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScalarTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Point</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//转化之后变为</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个标量了。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df08b75dfbe548c4943131f72414fdfe~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>标量替换默认开启，你也可以通过参数手动设置<code>-XX:+EliminateAllocations</code>，开启之后允许将对象打散分配到栈上，<code>GC</code>减少，执行速度提升。</p></blockquote><h4 id="常见的发生逃逸的场景" tabindex="-1"><a class="header-anchor" href="#常见的发生逃逸的场景" aria-hidden="true">#</a> <a href=""></a>常见的发生逃逸的场景</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8d3b3206c0248449fe734e530957b5d~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4066781ccc144b83aaac71fc8ff13c73~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><p><strong>举例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EscapeAnalysis</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">EscapeAnalysis</span> obj<span class="token punctuation">;</span>
    
     <span class="token comment">/*
    为成员属性赋值，发生逃逸
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//思考：如果当前的obj引用声明为static的？仍然会发生逃逸。</span>

    <span class="token comment">/*
    方法返回EscapeAnalysis对象，发生逃逸
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">EscapeAnalysis</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">EscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   
   
    <span class="token comment">/*
    引用成员变量的值，发生逃逸
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useEscapeAnalysis1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">EscapeAnalysis</span> e <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//getInstance().xxx()同样会发生逃逸</span>
    <span class="token punctuation">}</span>
    
     <span class="token comment">/*
    对象的作用域仅在当前方法中有效，没有发生逃逸
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useEscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">EscapeAnalysis</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逃逸分析并不成熟" tabindex="-1"><a class="header-anchor" href="#逃逸分析并不成熟" aria-hidden="true">#</a> <a href=""></a>逃逸分析并不成熟</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/699ceb051e0244ccbceeb85b47995248~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbb883bcfc9448859c1347a3141d7123~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b360cd9b3ce4a8882c3beb4d49dadd1~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a948e2161f8f4d10b92220374b2de16e~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><p><code>1999</code>年就已经发表了关于逃逸分析的论文，但<code>JDK1.6</code>中才有实现，而且这项技术到如今也不是十分成熟。</p><p>其根本原因就是无法保证逃逸分析的性能提升一定能高于它的消耗，因为逃逸分析自身也需要进行一系列复杂的分析，是需要耗时的。</p><p>一个极端的例子，就是经过逃逸分析之后，发现所有对象都逃逸了，那这个逃逸分析的过程就白白浪费掉了。</p><blockquote><p>细心的小伙伴也应该能发现，我们在抽样器中的截图其实就是在堆中分配的对象。</p></blockquote>`,63),t=[c];function o(i,l){return s(),a("div",null,t)}const d=n(e,[["render",o],["__file","Battle：你会TLAB，我会逃逸分析.html.vue"]]);export{d as default};
