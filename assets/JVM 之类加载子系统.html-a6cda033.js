import{_ as a,W as s,X as e,a2 as n}from"./framework-a9f5de78.js";const o={},c=n(`<blockquote><p>通篇文章都是以<code>HotSpot JVM</code>为例</p></blockquote><p>上篇文章中我们知道了<code>JVM</code>是个啥？本篇文章就让我们来了解一下类加载子系统（<code>ClassLoader</code>）—— 负责从文件系统或者网络中加载<code>Class</code>字节码文件，并将加载的类信息（DNA元数据模版，jvm会根据这个模版实例化出n个一模一样的实例）存放于“方法区”(接下来的文章中会做具体的介绍)中。<code>ClassLoader</code>只负责文件的加载，而文件是否可以运行，则由执行引擎（<code>Exection Engine</code>，接下来的文章中会做具体的介绍）决定。</p><p>下图是类加载子系统构造图：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7050aeb6468a426e82810b2f44eb1d48~tplv-k3u1fbpfcp-zoom-1.image" alt="类加载子系统" tabindex="0" loading="lazy"><figcaption>类加载子系统</figcaption></figure><h2 id="类的加载过程" tabindex="-1"><a class="header-anchor" href="#类的加载过程" aria-hidden="true">#</a> 类的加载过程</h2><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/414462e8a92c43bbb6a1e29f420ce010~tplv-k3u1fbpfcp-zoom-1.image" alt="类加载过程" tabindex="0" loading="lazy"><figcaption>类加载过程</figcaption></figure><h3 id="加载-loading" tabindex="-1"><a class="header-anchor" href="#加载-loading" aria-hidden="true">#</a> 加载（Loading）</h3><p><strong>加载流程</strong></p><ol><li>通过一个类的全限定名获取定义此类的二进制字节流；</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构；</li><li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</li></ol><p><strong>加载<code>.class</code>文件的方式</strong></p><ul><li>从本地系统中直接加载；</li><li>通过网络获取，典型场景：<code>Web Applet</code>；</li><li>从zip压缩包中读取，成为日后<code>jar</code>、<code>war</code>格式的基础；</li><li>运行时计算生成，使用最多的是：动态代理技术；</li><li>由其他文件生成，典型场景：<code>jsp</code>应用；</li><li>从专有数据库中提取<code>.class</code>文件，比较少见；</li><li>从加密文件中读取，典型的防<code>Class</code>文件被反编译的保护措施。</li></ul><h3 id="链接-linking" tabindex="-1"><a class="header-anchor" href="#链接-linking" aria-hidden="true">#</a> 链接（Linking）</h3><p><strong>（1）验证（Verify）</strong></p><ul><li>目的是保证<code>Class</code>文件的字节流中包含的信息符合当前虚拟机的要求，保证被加载类的正确性，不会危害虚拟机的自身安全。</li><li>主要分为四种验证方式：文件格式验证、元数据验证、字节码验证、符号引用验证。</li></ul><p>文件格式验证：主要验证字节流是否符合Class文件格式规范，并且能被当前的虚拟机加载处理。例如：主、次版本号是否在当前虚拟机处理的范围之内。常量池中是否有不被支持的常量类型。指向常量的中的索引值是否存在不存在的常量或不符合类型的常量。</p><p>元数据验证：对字节码描述的信息进行语义的分析，分析是否符合java的语言语法的规范。</p><p>字节码验证：最重要的验证环节，分析数据流和控制，确定语义是合法的，符合逻辑的。主要的针对元数据验证后对方法体的验证。保证类方法在运行时不会有危害出现。</p><p>符号引用验证：主要是针对符号引用转换为直接引用的时候，是会延伸到第三解析阶段，主要去确定访问类型等涉及到引用的情况，主要是要保证引用一定会被访问到，不会出现类等无法访问的问题。</p><blockquote><p><code>java</code>虚拟机字节码文件起始编码CAFEBABE（使用<code>Binary Viewer</code>软件）</p></blockquote><p><strong>（2）准备（Prepare）</strong></p><ul><li>为类变量（静态变量）分配内存并且设置该类变量的默认初始值，即零值。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public class HelloWord{
  //准备阶段：a=0 -&gt; 初始化阶段：a=1
  private static int a = 1;
  
  public static void main(){
    System.out.println(a);
  }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这里不包含<code>final</code>修饰的<code>static</code>，因为<code>final</code>在编译的时候就会分配了，准备阶段会显示初始化；</li><li>这里不会为实例变量（new的对象）分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到<code>java</code>堆中。</li></ul><p><strong>（3）解析（Resolve）</strong></p><p>将常量池内的符号引用（符号引用就是一组符号来描述所引用的目标）转换为直接引用（直接引用就是直接指向目标的指针、相对偏移量或一个简洁定位到目标的句柄）的过程。事实上，解析操作往往会伴随着<code>JVM</code>在执行完初始化之后再执行。解析动作主要针对类或接口、字段、类方法、方法类型等。对应常量池中的<code>CONSTANT_Class_info</code>、<code>CONSTANT_Fieldref_info</code>、<code>CONSTANT_Methodref_info</code>等。</p><blockquote><p>解析的执行过程等后边讲到字节码文件时再做具体解释。</p></blockquote><h3 id="初始化-initialization" tabindex="-1"><a class="header-anchor" href="#初始化-initialization" aria-hidden="true">#</a> 初始化（Initialization）</h3><ul><li>初始化阶段就是执行类构造器方法 <code>&lt;clinit&gt;()</code>的过程。此方法不需要定义，是<code>javac</code>编译器自动收集类中的所有<code>类变量</code>的赋值动作和<code>静态代码块</code>中的语句合并而来。构造器方法中的指令按语句在源文件中出现的顺序执行。<code>&lt;clinit&gt;()</code>不同于类的构造器，构造器是虚拟机视角下的<code>&lt;init&gt;()</code>。</li><li>若该类具有父类，JVM会保证子类的<code>&lt;clinit&gt;()</code>执行前，父类的<code>&lt;clinit&gt;()</code>已经执行完毕。</li><li>虚拟机必须保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程下被同步加锁。</li></ul><p><strong>样例：</strong><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52046877e3df4be7a24a62d934f76c61~tplv-k3u1fbpfcp-zoom-1.image" alt="初始化阶段加载顺序" loading="lazy"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9180e34eef694f70992795e24488be04~tplv-k3u1fbpfcp-zoom-1.image" alt="字节码阅读器插件" loading="lazy"></p><p>在未定义前进行调用会导致“非法前向引用”错误 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2cb34be724e546b3b48ce9494ad7b145~tplv-k3u1fbpfcp-zoom-1.image" alt="非法的前向引用" loading="lazy"></p><h4 id="类的初始化时机" tabindex="-1"><a class="header-anchor" href="#类的初始化时机" aria-hidden="true">#</a> 类的初始化时机</h4><p>java程序对类的使用方式可以分为两种：</p><p><strong>1. 主动使用</strong></p><ul><li>创建类的实例</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射</li><li>初始化一个类的子类</li><li>Java虚拟机启动被标明为启动类的类</li><li>JDK 7 开始提供的动态语言支持：<code>java.lang.invoke.MethodHandle</code>实例的解析结果，<code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>句柄对应的类没有初始化，则初始化。</li></ul><p><strong>2. 被动使用</strong>：除了以上七种情况，其他都被看作是类的被动使用，都不会导致类的初始化。</p><h2 id="类的加载器" tabindex="-1"><a class="header-anchor" href="#类的加载器" aria-hidden="true">#</a> 类的加载器</h2><h3 id="加载器分类" tabindex="-1"><a class="header-anchor" href="#加载器分类" aria-hidden="true">#</a> 加载器分类</h3><p>JVM支持两种类型的类加载器，分别为引导类加载器（<code>Bootstrap ClassLoader</code>）和自定义加载器（<code>User-Defined ClassLoader</code>），他们之间不是继承关系，而是包含关系。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72623f923f0945a39898624d745f9624~tplv-k3u1fbpfcp-zoom-1.image" alt="加载器类图" loading="lazy"></p><p><strong>引导类加载器</strong></p><p>引导类加载器又称为启动类加载器，该类是使用<code>C/C++</code>语言实现的，嵌套在<code>JVM</code>内部。它用来加载<code>Java</code>的核心类库（<code>JAVA_HOME/jre/lib/rt.jar</code>、<code>resources.jar</code>或<code>sun.boot.class.path</code>路径下的内容），用于提供<code>jvm</code>自身需要的类，出于安全考虑，<code>Bootstrap</code>启动类只加载包名为<code>java</code>、<code>javax</code>、<code>sun</code>等开头的类。它并不继承自<code>java.lang.ClassLoader</code>，没有父加载器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//String属于java的核心类库---&gt;使用引导类加载器进行加载</span>
<span class="token class-name">ClassLoader</span> classLoader1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义加载器</strong></p><p>自定义加载器是指所有派生于抽象类<code>CLassLoader</code>的类加载器，它分为扩展类加载器、应用程序（系统）加载器、用户自定义加载器。</p><p>（1）扩展类加载器</p><p>java语言编写，由<code>sun.misc.Launcher.ExtClassLoader</code>实现。其父类加载器为启动类加载器，从<code>java.ext.dirs</code>系统属性所指定的目录中加载类库，或从<code>jdk</code>的安装目录的<code>jre/lib/ext</code>子目录（扩展目录）下加载类库。如果用户创建的<code>jar</code>放在此目录下，也会自动由扩展类加载器加载。</p><p>（2）系统加载器</p><p>java语言编写，由<code>sun.misc.Launcher.AppClassLoader</code>实现。父类加载器为扩展类加载器，负责加载环境变量<code>classpath</code>或系统属性，<code>java.class.path</code>指定路径下的类库。该类加载是程序中默认的类加载器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取系统类加载器</span>
<span class="token class-name">ClassLoader</span> systemClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span>

<span class="token comment">//获取其上层：扩展类加载器</span>
<span class="token class-name">ClassLoader</span> extClassLoader <span class="token operator">=</span> systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>extClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sun.misc.Launcher$ExtClassLoader@4554617c</span>

<span class="token comment">//获取引导类加载器</span>
<span class="token class-name">ClassLoader</span> bootstrapClassLoader <span class="token operator">=</span> extClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bootstrapClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）用户自定义加载器</p><p>开发人员可以通过继承抽象类<code>java.lang.ClassLoader</code>，并实现<code>findClass()</code>方法来实现自定义类加载器。在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承<code>URLClassLoader</code>类，这样就可以避免自己去编写<code>findClass()</code>方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token comment">//用户自定义类：默认使用系统类加载器进行加载</span>
<span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassLoaderTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么要自定义加载器？</p><ul><li>隔离加载类；</li><li>修改类加载方式；</li><li>扩展加载源；</li><li>防止源码泄漏；</li></ul><h3 id="classloader的获取与api" tabindex="-1"><a class="header-anchor" href="#classloader的获取与api" aria-hidden="true">#</a> ClassLoader的获取与API</h3><p><strong>获取</strong></p><ol><li>获取当前类的<code>ClassLoader</code>：<code>clazz.getClassLoader()</code>;</li><li>获取当前线程上下文的<code>ClassLoader</code>：<code>Thread.currentThread().getContextClassLoader()</code>;</li><li>获取系统的<code>ClassLoader</code>：<code>ClassLoader.getSystemClassLoader()</code>;</li><li>获取调用者的<code>ClassLoader</code>：<code>DriverManager.getCallerClassLoader()</code>;</li></ol><p><strong>API</strong></p><ul><li>Class loadClass(String name) ：name参数指定类装载器需要装载类的名字，必须使用全限定类名，如：<code>com.smart.bean.Car</code>。该方法有一个重载方法 <code>loadClass(String name,boolean resolve)\`\`，</code>resolve\`参数告诉类装载时候需要解析该类，在初始化之前，因考虑进行类解析的工作，但并不是所有的类都需要解析。如果JVM只需要知道该类是否存在或找出该类的超类，那么就不需要进行解析。</li><li>Class defineClass(String name,byte[] b,int len)：将类文件的字节数组转换成JVM内部的<code>java.lang.Class</code>对象。字节数组可以从本地文件系统、远程网络获取。参数name为字节数组对应的全限定类名。</li><li>Class findSystemClass(String name)：从本地文件系统加载<code>Class</code>文件。如果本地系统不存在该<code>Class</code>文件。则抛出<code>ClassNotFoundException</code>异常。该方法是JVM默认使用的装载机制</li><li>Class findLoadedClass(String name)：调用该方法来查看<code>ClassLoader</code>是否已载入某个类。如果已载入，那么返回<code>java.lang.Class</code>对象；否则返回<code>null</code>。如果强行装载某个已存在的类，那么则抛出链接错误。</li><li>ClassLoader getParent()：获取类装载器的父装载器。除根装载器外，所有的类装载器都有且仅有一个父装载器。<code>ExtClassLoader</code>的父装载器是根装载器，因为根装载器非<code>java</code>语言编写，所以无法获取，将返回<code>null</code>。</li></ul><h3 id="双亲委派机制" tabindex="-1"><a class="header-anchor" href="#双亲委派机制" aria-hidden="true">#</a> 双亲委派机制</h3><p><code>Java</code>虚拟机对<code>class</code>文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的<code>class</code>文件加载到内存生成<code>class</code>对象。而且加载某个类的<code>class</code>文件时，<code>Java</code>虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式。</p><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h4><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38d53cfba5cc4ec8840652222d8c102c~tplv-k3u1fbpfcp-zoom-1.image" alt="双亲委派原理" tabindex="0" loading="lazy"><figcaption>双亲委派原理</figcaption></figure><p>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行。如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器。如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</p><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h4><ul><li>避免类的重复加载，当父亲已经加载了该类时，就没有必要子<code>ClassLoader</code>再加载一次。</li><li>保护程序安全，防止核心API被随意篡改。举例代码截图如下 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40350527758646dc964ced1976c78f1c~tplv-k3u1fbpfcp-zoom-1.image" alt="自定义String类" loading="lazy"></li></ul><p>如图所示，我们创建<code>java.lang.String</code>类，当在加载自定义类的时候会先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载<code>jdk</code>自带的文件（<code>rt.jar</code>包中的<code>java/lang/String.class</code>）。报错信息说没有<code>main</code>方法，就是因为加载的是<code>rt.jar</code>包下的<code>String</code>类。这样我们就能保证对<code>java</code>的核心源代码进行保护，这就是<strong>沙箱安全机制</strong>。由此可知<code>JVM</code>中判断两个<code>Class</code>对象是否是同一个类存在两个必要条件：一是类的完整类名必须保持一致，包括包名；二是加载该类的类加载器必须相同。</p><h4 id="对类加载器的引用" tabindex="-1"><a class="header-anchor" href="#对类加载器的引用" aria-hidden="true">#</a> 对类加载器的引用</h4><p><code>JVM</code>必须知道一个类是由启动类加载器还是用户类加载器加载的，如果一个类是由用户类加载器加载的，那么<code>jvm</code>会将这个类加载器的一个引用作为类信息的一部分保存到方法区中，当解析一个类到另一个类的引用的时候，<code>jvm</code>需要保证两个类的类加载器是相同的。</p>`,68),l=[c];function t(i,d){return s(),e("div",null,l)}const r=a(o,[["render",t],["__file","JVM 之类加载子系统.html.vue"]]);export{r as default};
