import{_ as n,W as s,X as a,a2 as e}from"./framework-a9f5de78.js";const t={},p=e(`<h2 id="面试路上" tabindex="-1"><a class="header-anchor" href="#面试路上" aria-hidden="true">#</a> 面试路上</h2><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2ea6159dcc14a02a1d579096b428743~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>“滴，滴滴......”师傅我们到哪了？我还要赶着面试呢。</p><p><strong>师傅：</strong> 快了快了，下个路口就到了。真是服了这帮人了，不会开车净往里凑。</p><p>听着司机师傅的抱怨声，不禁想起首打油诗：满目尾灯红，耳盈刺笛声。心忧迟到久，颓首似雷轰。</p><p>一下车赶紧小跑就进了富丽堂皇的酒店，不不不，是商务楼，这大厅有点气派，让我有点想入非非呀。</p><h2 id="面试经过" tabindex="-1"><a class="header-anchor" href="#面试经过" aria-hidden="true">#</a> <strong>面试经过</strong></h2><p>“咚咚咚”，“请进”。</p><p><strong>面试官：</strong> 小伙子长得挺帅呀，年轻人就是有活力，来先做个简单的自我介绍吧。</p><p><strong>阿Q：</strong> 面试官你好，My name is “影流之主”，来自艾欧尼亚，是<code>LOL</code>中的最强中单（不接受反驳），论单杀没有服过谁。我的口头禅是“无形之刃，最为致命”，当然你也可以叫我阿Q，这是我的简历。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bf31fc1d4ee4e12b8ff0b2cd48a6dd4~tplv-k3u1fbpfcp-zoom-1.image" alt="简历" tabindex="0" loading="lazy"><figcaption>简历</figcaption></figure><p><strong>面试官：</strong> 阿Q，那咱也不寒暄了，直接切正题吧。看你<code>jvm</code>写的知识点最多，那就先说一下你对虚拟机栈的理解吧。</p><p><strong>阿Q：</strong> 内心OS：这波可以吹X了。咳...咳...虚拟机栈早期也叫<code>java</code>栈，是在<code>jvm</code>的运行时数据区存在的一块内存区域。它是线程私有的，随线程创建而创建，随线程消亡而结束。</p><p>嗯。。。假装想一下😄</p><p>众所周知，栈只有进栈和出栈两种操作，所以它是一种快速有效的分配存储方式。对于它来说，它不存在垃圾回收问题，但是它的大小是动态的或者固定不变的，因此它会存在栈溢出或者内存溢出问题......</p><p><strong>面试官:</strong> 打断一下啊，你刚才说会存在栈溢出和内存溢出问题，那你能分别说一下为什么会出现这种情况吗？</p><p><strong>阿Q：</strong> 可以可以，我们知道虚拟机栈由栈帧组成，每一个方法的调用都对应着一个栈帧的入栈。我们可以通过<code>-Xss</code>参数来设置栈的大小，假设我们设置的虚拟机栈大小很小，当我们调用的方法过多，也就是栈帧过多的话，就会出现<code>StackOverflowError</code>，即栈溢出问题。</p><p>假如我们的栈帧不固定，设置为动态扩展的，那在我们的内存不足时，也就没有足够的内存来支持栈的扩展，这个时候就会出现<code>OOM</code>异常，即内存溢出问题。</p><p><strong>面试官:</strong> 嗯嗯（点头状），示意小伙子思路很清晰呀，那你刚才说到栈帧设置的太小会导致栈帧溢出问题，那我们设置的大点不就可以完全避免栈溢出了嘛。</p><p><strong>阿Q：</strong> 一听就是要给我挖坑呀，像我们一般都比较崇尚中庸之道，所以一听到这种绝对的问题，必须机灵点：不不不，调整栈的大小只可以<strong>延缓</strong>栈溢出的时间或者说减少栈溢出的风险。</p><h3 id="举个🌰吧" tabindex="-1"><a class="header-anchor" href="#举个🌰吧" aria-hidden="true">#</a> 举个🌰吧</h3><ol><li>假如一个业务逻辑的方法调用需要<code>5000</code>次，但是此时抛出了栈溢出的错误。我们可以通过设置<code>-Xss</code>来获取更大的栈空间，使得调用在<code>7000</code>次时才会溢出。此时调整栈大小就变得很有意义，因为这样就会使得业务能正常支持。</li><li>那假如是有<strong>死递归</strong>的情况则无论怎么提高栈大小都会溢出，这样也就没有任何意义了。</li></ol><p><strong>面试官:</strong> 好的，那你看一下这个简单的小程序，你能大体说一下它在内存中的执行过程吗？</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> public void test() {
      byte i = 15;
      int j = 8;
      int k = i + j;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/438b702128514f3b9b72b9da40276b7d~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="来张图-便于大家更好地理解" tabindex="-1"><a class="header-anchor" href="#来张图-便于大家更好地理解" aria-hidden="true">#</a> 来张图，便于大家更好地理解</h3><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0913ce955d34eb18a33aa355c5b4ad4~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>阿Q：</strong> 先把该代码编译一下，然后查看它的字节码文件。如上图中左边所示，执行过程如下：</p><ol><li>首先将要执行的指令地址<code>0</code>存放到<code>PC</code>寄存器中，此时，局部变量表和操作数栈的数据为空；</li><li>当执行第一条指令<code>bipush</code>时，将操作数<code>15</code>放入操作数栈中，然后将<code>PC</code>寄存器的值置为下一条指令的执行地址，即<code>2</code>；</li><li>当执行指令地址为<code>2</code>的操作指令时，将操作数栈中的数据取出来，存到局部变量表的<code>1</code>位置，因为该方法是实例方法，所以<code>0</code>位置存的是<code>this</code>的值，<code>PC</code>寄存器中的值变为<code>3</code>;</li><li>同步骤2和3将<code>8</code>先放入操作数栈，然后取出来存到局部变量表中，<code>PC</code>寄存器中的值也由<code>3</code>-&gt;<code>5</code>-&gt;<code>6</code>；</li><li>当执行到地址指令为<code>6</code>、<code>7</code>、<code>8</code>时，将局部变量表中索引位置为<code>1</code>和<code>2</code>的数据重新加载到操作数栈中并进行<code>iadd</code>加操作，将得到的结果值存到操作数栈中，<code>PC</code>寄存器中的值也由<code>6</code>-&gt;<code>7</code>-&gt;<code>8</code>-&gt;<code>9</code>；</li><li>执行操作指令<code>istore_3</code>，将操作数栈中的数据取出存到局部变量表中索引为<code>3</code>的位置，执行<code>return</code>指令，方法结束。</li></ol><p><strong>面试官:</strong> 内心OS：这小子貌似还可以呀。说的还不错，那你能说一下方法中定义的局部变量是否线程安全吗？</p><p><strong>阿Q：</strong> 那我再用几个例子来说一下吧。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalParaSafeProblem</span> <span class="token punctuation">{</span>


    <span class="token doc-comment comment">/**
     * 线程安全的
     * 虽然StringBuilder本身线程不安全，
     * 但s1 变量只存在于这个栈帧的局部变量表中，
     * 因为栈帧是每个线程独立的一份，
     * 所以这里的s1是线程安全的
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 线程内部创建的，属于局部变量</span>
        <span class="token class-name">StringBuilder</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 线程不安全
     * 因为此时StringBuilder是作为参数传入，
     * 外部的其他线程也可以访问，所以线程不安全
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> stringBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 线程不安全
     * 此时StringBuilder被多个线程同时操作
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">method02</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 线程不安全
     * 因为此时方法将StringBuilder返回出去了
     * 外面的其他线程可以直接修改StringBuilder这个引用了所以不安全
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> <span class="token function">method04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * StringBuilder是线程安全的
     * 此时stringBuilder值在当前栈帧的局部变量表中存在，
     * 其他线程无法访问到该引用，
     * 方法执行完成之后此时局部变量表中的stringBuilder的就销毁了
     * 返回的stringBuilder.toString()线程不安全
     * 最后的返回值将toString返回之后，其他线程可以操作而String本身是线程不安全的。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">method05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这估计会有点绕，那我就总结一下吧：如果对象是在方法内部产生且在内部消亡，不会返回到外部就不存在线程安全问题；反之如果类本身线程不安全的话就存在线程安全问题。</p><p><strong>面试官：</strong> 不错不错，有理有据，那你再说说你对堆内存的理解吧。</p><p><strong>阿Q：</strong> 唉，今天太累了，说了一天这个了，不想说了。</p><p><strong>面试官：</strong> 那好吧，那我们今天先到这吧，回去等通知吧。</p>`,36),i=[p];function c(o,l){return s(),a("div",null,i)}const d=n(t,[["render",c],["__file","虚拟机栈5连问，轻松对线面试官.html.vue"]]);export{d as default};
