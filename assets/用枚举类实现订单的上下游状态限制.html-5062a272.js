import{_ as n,W as s,X as a,a2 as t}from"./framework-a9f5de78.js";const p={},e=t(`<h2 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖" aria-hidden="true">#</a> 语法糖</h2><blockquote><p>语法糖（Syntactic sugar），也被译为糖衣语法，是由英国计算机科学家彼得·约翰·兰达（Peter J. Landin）发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。——摘抄自百度百科</p></blockquote><p>本质上，JVM 并不支持语法糖，语法糖只存在于<strong>编译期</strong>。当编译器将 .java 源文件编译成 .class 字节码文件时，会进行<strong>解语法糖</strong>的操作，来还原最原始的基础语法结构。</p><p>我们所熟悉的编程语言中几乎都会包含语法糖，当然 JAVA 也不例外。JAVA 中的语法糖包含<strong>条件编译</strong>、<strong>断言</strong>、<strong>switch 支持 String 与枚举</strong>、<strong>可变参数</strong>、<strong>自动装箱/拆箱</strong>、<strong>枚举</strong>、<strong>内部类</strong>、<strong>泛型擦除</strong>、<strong>增强for循环</strong>、<strong>lambda表达式</strong>、<strong>try-with-resources</strong>等等。今天我们先来了解下<strong>枚举</strong>。</p><h2 id="枚举类" tabindex="-1"><a class="header-anchor" href="#枚举类" aria-hidden="true">#</a> 枚举类</h2><p>JDK5 提供了一种新的特殊的类——枚举类，一般在类对象有限且固定的场景下使用，用来替代类中定义常量的方式。枚举相较于常量更加直观且类型安全。</p><p>枚举类的使用非常简单，用 enum 关键字来定义，多个枚举变量直接用逗号隔开。我们先来定义一个简单的枚举类 <code>OrderStatus.java</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OrderStatus</span> <span class="token punctuation">{</span>
    <span class="token comment">//未支付、已支付、退款中、退款成功、退款失败；</span>
    <span class="token constant">NO_PAY</span><span class="token punctuation">,</span> <span class="token constant">PAY</span><span class="token punctuation">,</span> <span class="token constant">REFUNDING</span><span class="token punctuation">,</span> <span class="token constant">REFUNDED</span><span class="token punctuation">,</span> <span class="token constant">FAIL_REFUNDED</span><span class="token punctuation">,</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在其他类中使用 enum 变量的时候，只需要【类名.变量名】就可以了，和使用静态变量一样。另外，枚举类型可以确保 JVM 中仅存在<strong>一个</strong>常量实例，所以我们可以放心的使用“ ==”来比较两个变量。</p><p><strong>注意事项：</strong></p><ol><li>枚举类的第一行必须是枚举项，最后一个枚举项后的分号是可以省略的，但是如果枚举类有其它的东西，这个分号就不能省略。<strong>建议不要省略！</strong></li><li>枚举变量最好大写，多个单词之间使用”_”隔开（比如：NO_PAY）。</li></ol><h3 id="反编译" tabindex="-1"><a class="header-anchor" href="#反编译" aria-hidden="true">#</a> 反编译</h3><p>我们可以先通过 javac 命令或者 IDEA 的编译功能将<code>OrderStatus.java</code> 编译为<code>OrderStatus.class</code> 字节码文件，然后用<code>DJ Java Decompiler</code> 反编译器对 .class 文件进行反编译。</p><p>如果需要 <code>DJ Java Decompiler</code> 反编译器的小伙伴可以<strong>私信</strong>阿Q获取！</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">OrderStatus</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span>
<span class="token punctuation">{</span>

    <span class="token comment">//该方法会返回包括所有枚举变量的数组，可以方便的用来做循环。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$<span class="token constant">VALUES</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//根据传入的字符串，转变为对应的枚举变量。</span>
    <span class="token comment">//前提是传的字符串和定义枚举变量的字符串一抹一样，区分大小写。</span>
    <span class="token comment">//如果传了一个不存在的字符串，那么会抛出异常。</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">OrderStatus</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">)</span><span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>com<span class="token operator">/</span>itcast<span class="token operator">/</span>java<span class="token operator">/</span>enumpack<span class="token operator">/</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">OrderStatus</span> <span class="token constant">NO_PAY</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">OrderStatus</span> <span class="token constant">PAY</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">OrderStatus</span> <span class="token constant">REFUNDING</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">OrderStatus</span> <span class="token constant">REFUNDED</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">OrderStatus</span> <span class="token constant">FAIL_REFUNDED</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">OrderStatus</span> $<span class="token constant">VALUES</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> 
    <span class="token punctuation">{</span>
        <span class="token constant">NO_PAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">(</span><span class="token string">&quot;NO_PAY&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">PAY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">(</span><span class="token string">&quot;PAY&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">REFUNDING</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">(</span><span class="token string">&quot;REFUNDING&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">REFUNDED</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">(</span><span class="token string">&quot;REFUNDED&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">FAIL_REFUNDED</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">(</span><span class="token string">&quot;FAIL_REFUNDED&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token constant">VALUES</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token constant">NO_PAY</span><span class="token punctuation">,</span> <span class="token constant">PAY</span><span class="token punctuation">,</span> <span class="token constant">REFUNDING</span><span class="token punctuation">,</span> <span class="token constant">REFUNDED</span><span class="token punctuation">,</span> <span class="token constant">FAIL_REFUNDED</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如源码所示：</p><ul><li>编译器会自动帮我们创建一个 <strong>final</strong> 类型的类继承 Enum 类，所以枚举类不能被继承。</li><li>会自动生成<strong>私有</strong>构造方法，当然我们也可以定义构造方法，但必须是私有的，这样就不能在别处声明此类的对象了。</li><li>枚举项会被自动添加 <code>public static final</code> 修饰，并定义为 <code>OrderStatus</code> 类型，并在<strong>静态代码块</strong>中被初始化。</li><li>并提供了 <strong>values()</strong> 和 <strong>valueOf(String name)</strong> 的静态方法。</li></ul><p>我们定义的枚举变量实际上是编译器帮我们自动生成了构造函数。</p><blockquote><p>所有枚举类都是 Enum 的子类，枚举类可以实现一个或多个接口。</p></blockquote><h3 id="enum" tabindex="-1"><a class="header-anchor" href="#enum" aria-hidden="true">#</a> Enum</h3><p>Enum 是所有 Java 语言枚举类型的公共基类，实现了 Comparable 和 Serializable 接口。它包含 final 类型的 name 和 ordinal （此枚举常量的序号，从0开始）属性，下面我们来了解下它的方法</p><ul><li>protected Enum(String name, int ordinal)；——构造方法；</li><li>public String toString()；——返回 name 字段，即枚举定义枚举变量的字符串；</li><li>protected final Object clone()；——抛出 CloneNotSupportedException 异常，保证枚举类永远不会被克隆；</li><li>public final Class<code>&lt;E&gt;</code> getDeclaringClass()；——返回与此枚举常量的枚举类型对应的类对象；</li><li>protected final void finalize()；—— 枚举类不能有 finalize 方法；</li><li>readObject(ObjectInputStream in)；&amp; readObjectNoData()；—— 抛出InvalidObjectException 异常，防止默认反序列化；</li></ul><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3><ol><li><p>枚举类中可以自定义属性</p><p>自定义的属性值最好用 private final 修饰，防止生成的 set 方法在使用时修改属性值，使代码更加安全。</p></li><li><p>枚举类中可以自定义构造函数</p><p>构造函数必须为 private 修饰，防止在别处声明此类对象。</p></li><li><p>枚举类可以自定义方法，枚举项可以选择性覆盖自定义的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">{</span>
    <span class="token function">NO_PAY</span><span class="token punctuation">(</span><span class="token string">&quot;未支付&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">PAY</span><span class="token punctuation">(</span><span class="token string">&quot;已支付&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOrderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;已支付&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">REFUNDING</span><span class="token punctuation">(</span><span class="token string">&quot;退款中&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">REFUNDED</span><span class="token punctuation">(</span><span class="token string">&quot;退款成功&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FAIL_REFUNDED</span><span class="token punctuation">(</span><span class="token string">&quot;退款失败&quot;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOrderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;打印订单状态&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">PAY</span><span class="token punctuation">.</span><span class="token function">printOrderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">NO_PAY</span><span class="token punctuation">.</span><span class="token function">printOrderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c207d881a5144b78a64fba0c58f48b2a~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>枚举类也可以有抽象方法，但是枚举项必须重写该方法。</p></blockquote><ol start="4"><li><p>枚举类实现接口</p><p>与普通类一样，实现接口的时候需要实现接口的抽象方法，也可以让枚举类的不同对象实现不同的行为。</p></li></ol><p><strong>例</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//定义一个接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">printOrderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//枚举类实现该接口</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OrderStatus</span> <span class="token keyword">implements</span> <span class="token class-name">Order</span><span class="token punctuation">{</span>
    <span class="token function">NO_PAY</span><span class="token punctuation">(</span><span class="token string">&quot;未支付&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOrderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未支付&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">PAY</span><span class="token punctuation">(</span><span class="token string">&quot;已支付&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOrderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;已支付&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">REFUNDING</span><span class="token punctuation">(</span><span class="token string">&quot;退款中&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOrderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;退款中&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">REFUNDED</span><span class="token punctuation">(</span><span class="token string">&quot;退款成功&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOrderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;退款成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">FAIL_REFUNDED</span><span class="token punctuation">(</span><span class="token string">&quot;退款失败&quot;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOrderStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;退款失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时查看编译后的文件，会发现除了生成 OrderStatus.class 文件之外，还生成了多个 .class 文件：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00dc3ce0732f4aa5aa2ad9b569954239~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>它们是 OrderStatus.class 中生成的匿名内部类的文件。</p><h2 id="状态转换" tabindex="-1"><a class="header-anchor" href="#状态转换" aria-hidden="true">#</a> 状态转换</h2><h3 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求</h3><p>订单是电商项目中不可缺少的组成部分，而订单状态的转换也是我们经常讨论的问题。我们都知道订单状态的转换是有一定的逻辑性的，不可以随意转换。</p><p><strong>例</strong>：你想购买某个商品，只是把它加入了购物车，此时应该是<strong>未支付状态</strong>。如果来个请求想把它转换为<strong>退款状态</strong>，那么系统应该抛出提示信息“状态转换失败，请先完成购买！”</p><p>接下来我们就用<strong>枚举</strong>来完成一下订单状态转换的限制。</p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><p>枚举类定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">{</span>
    <span class="token function">NO_PAY</span><span class="token punctuation">(</span><span class="token string">&quot;未支付&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">canChange</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span> orderStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>orderStatus<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token constant">PAY</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">PAY</span><span class="token punctuation">(</span><span class="token string">&quot;已支付&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">canChange</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span> orderStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//因为退款接口一般都会有延迟，所以会先转化为“退款中”状态</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>orderStatus<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token constant">REFUNDING</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">REFUNDING</span><span class="token punctuation">(</span><span class="token string">&quot;退款中&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">canChange</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span> orderStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>orderStatus<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token constant">REFUNDED</span><span class="token operator">:</span>
                <span class="token keyword">case</span> <span class="token constant">FAIL_REFUNDED</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">REFUNDED</span><span class="token punctuation">(</span><span class="token string">&quot;退款成功&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FAIL_REFUNDED</span><span class="token punctuation">(</span><span class="token string">&quot;退款失败&quot;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//自定义转换方法</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">canChange</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span> orderStatus<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">NO_PAY</span><span class="token punctuation">.</span><span class="token function">canChange</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">PAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> statusStr <span class="token operator">=</span> aBoolean<span class="token operator">?</span><span class="token string">&quot;可以&quot;</span><span class="token operator">:</span><span class="token string">&quot;不可以&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否可以完成状态转换：&quot;</span><span class="token operator">+</span> statusStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">REFUNDED</span><span class="token punctuation">.</span><span class="token function">canChange</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">FAIL_REFUNDED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> flagStr <span class="token operator">=</span> flag<span class="token operator">?</span><span class="token string">&quot;可以&quot;</span><span class="token operator">:</span><span class="token string">&quot;不可以&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;是否可以完成状态转换：&quot;</span><span class="token operator">+</span> flagStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结果：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c8d6566a81645afa1ae705cf77ac110~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样我们就用枚举类实现了订单状态转换的限制。此例子只是为状态转换提供一种<strong>思路</strong>，具体的流程还需要根据自己系统中的业务来具体处理。</p>`,45),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","用枚举类实现订单的上下游状态限制.html.vue"]]);export{k as default};
