import{_ as p,W as o,X as c,Y as n,Z as a,a0 as e,a2 as t,C as l}from"./framework-a9f5de78.js";const i={},u=t('<p>前几天在网上冲浪的时候发现了一个比较成熟的开源中间件——Canal。在了解了它的工作原理和使用场景后，顿时产生了浓厚的兴趣。今天，就让我们跟随阿Q的脚步，一起来揭开它神秘的面纱吧。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p><strong>canal</strong> 翻译为管道，主要用途是基于 MySQL 数据库的增量日志 Binlog 解析，提供增量数据订阅和消费。</p><p>早期阿里巴巴因为杭州和美国双机房部署，存在跨机房同步的业务需求，实现方式主要是基于业务 trigger 获取增量变更。从 2010 年开始，业务逐步尝试数据库日志解析获取增量变更进行同步，由此衍生出了大量的数据库增量订阅和消费业务。</p><p>基于日志增量订阅和消费的业务包括</p><ul><li>数据库镜像；</li><li>数据库实时备份；</li><li>索引构建和实时维护（拆分异构索引、倒排索引等）；</li><li>业务 cache 刷新；</li><li>带业务逻辑的增量数据处理；</li></ul><p>当前的 canal 支持源端 MySQL 的版本包括 5.1.x，5.5.x，5.6.x，5.7.x，8.0.x。</p><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h2><h3 id="mysql主备复制原理" tabindex="-1"><a class="header-anchor" href="#mysql主备复制原理" aria-hidden="true">#</a> MySQL主备复制原理</h3><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f96742ad66146deb4cf5164a177eda9~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>MySQL master 将数据变更写入二进制日志( binary log, 其中记录叫做二进制日志事件 binary log events，可以通过 show binlog events 进行查看)；</li><li>MySQL slave 将 master 的 binary log events 拷贝到它的中继日志(relay log)；</li><li>MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据；</li></ul><h3 id="canal-工作原理" tabindex="-1"><a class="header-anchor" href="#canal-工作原理" aria-hidden="true">#</a> canal 工作原理</h3><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44bf97db64674843b34ca68d26f36408~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送 dump 协议；</li><li>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )；</li><li>canal 解析 binary log 对象(原始为 byte 流)；</li></ul>',14),r={href:"https://github.com/alibaba/canal",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/alibaba/canal/wiki",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="canal架构" tabindex="-1"><a class="header-anchor" href="#canal架构" aria-hidden="true">#</a> Canal架构</h2><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8200233c50594d8697e8387b3faa839a~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一个 server 代表一个 canal 运行实例，对应于一个 jvm，一个 instance 对应一个数据队列。</p><p>instance模块：</p><ul><li>eventParser ：数据源接入，模拟 slave 协议和 master 进行交互，协议解析；</li><li>eventSink ：Parser 和 Store 链接器，进行数据过滤、加工、分发的工作；</li><li>eventStore ：数据存储；</li><li>metaManager ：增量订阅&amp;消费信息管理器；</li></ul><blockquote><p>instance 是 canal 数据同步的核心，在一个 canal 实例中只有启动 instace 才能进行数据的同步任务。一个 canal server 实例中可以创建多个 Canal Instance 实例。每一个 Canal Instance 可以看成是对应一个 MySQL 实例。</p></blockquote><h2 id="canal-ha机制" tabindex="-1"><a class="header-anchor" href="#canal-ha机制" aria-hidden="true">#</a> Canal-HA机制</h2><p>所谓 HA 即高可用，是 High Available 的简称。通常我们一个服务要支持高可用都需要借助于第三方的分布式同步协调服务，最常用的是zookeeper 。canal 实现高可用，也是依赖了zookeeper 的几个特性：watcher 和 EPHEMERAL 节点。</p><p>canal 的高可用分为两部分：canal server 和 canal client</p><ul><li>canal server: 为了减少对 mysql dump 的请求，不同 server 上的 instance（不同 server 上的相同 instance）要求同一时间只能有一个处于 running，其他的处于 standby 状态，也就是说，只会有一个 canal server 的 instance 处于 active 状态，但是当这个 instance down 掉后会重新选出一个 canal server。</li><li>canal client: 为了保证有序性，一份 instance 同一时间只能由一个 canal client 进行 get/ack/rollback 操作，否则客户端接收无法保证有序。</li></ul><p>server ha 的架构图如下：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9469140b5e44583b50a62851b521a57~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>大致步骤：</p><ol><li>canal server 要启动某个 canal instance 时都先向 zookeeper 进行一次尝试启动判断(实现：创建 EPHEMERAL 节点，谁创建成功就允许谁启动)；</li><li>创建 zookeeper 节点成功后，对应的 canal server 就启动对应的 canal instance，没有创建成功的 canal instance 就会处于 standby 状态。</li><li>一旦 zookeeper 发现 canal server A 创建的 instance 节点消失后，立即通知其他的 canal server 再次进行步骤1的操作，重新选出一个 canal server 启动 instance。</li><li>canal client 每次进行 connect 时，会首先向 zookeeper 询问当前是谁启动了canal instance，然后和其建立链接，一旦链接不可用，会重新尝试 connect。</li></ol><p><strong>Canal Client 的方式和 canal server 方式类似，也是利用 zookeeper 的抢占 EPHEMERAL 节点的方式进行控制。</strong></p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><h3 id="同步缓存-redis-全文搜索-es" tabindex="-1"><a class="header-anchor" href="#同步缓存-redis-全文搜索-es" aria-hidden="true">#</a> 同步缓存 Redis /全文搜索 ES</h3><p>当数据库变更后通过 binlog 进行缓存/ES的增量更新。当缓存/ES更新出现问题时，应该回退 binlog 到过去某个位置进行重新同步，并提供全量刷新缓存/ES的方法。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27a678fa26324e95aa8af7a085da82bb~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="下发任务" tabindex="-1"><a class="header-anchor" href="#下发任务" aria-hidden="true">#</a> 下发任务</h3><p>当数据变更时需要通知其他依赖系统。其原理是任务系统监听数据库变更，然后将变更的数据写入 MQ/kafka 进行任务下发，比如商品数据变更后需要通知商品详情页、列表页、搜索页等相关系统。</p><p>这种方式可以保证数据下发的精确性，通过 MQ 发送消息通知变更缓存是无法做到这一点的，而且业务系统中不会散落着各种下发 MQ 的代码，从而实现了下发归集。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe78ae259642481287a7cb171f003cbd~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="数据异构" tabindex="-1"><a class="header-anchor" href="#数据异构" aria-hidden="true">#</a> 数据异构</h3><p>在大型网站架构中，DB都会采用分库分表来解决容量和性能问题。但分库分表之后带来的新问题，比如不同维度的查询或者聚合查询，此时就会非常棘手。一般我们会通过数据异构机制来解决此问题。</p><p>所谓的数据异构，那就是将需要 join 查询的多表按照某一个维度又聚合在一个 DB 中让你去查询，canal 就是实现数据异构的手段之一。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/505a2723eb134587a5fc90de85e10fde~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="mysql-配置" tabindex="-1"><a class="header-anchor" href="#mysql-配置" aria-hidden="true">#</a> MySQL 配置</h2><h3 id="开启-binlog" tabindex="-1"><a class="header-anchor" href="#开启-binlog" aria-hidden="true">#</a> 开启 binlog</h3><p>首先在 mysql 的配置文件目录中查找配置文件 my.cnf（Linux环境）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@iZ2zebiempwqvoc2xead5lZ mysql<span class="token punctuation">]</span><span class="token comment"># find / -name my.cnf</span>
/etc/my.cnf
<span class="token punctuation">[</span>root@iZ2zebiempwqvoc2xead5lZ mysql<span class="token punctuation">]</span><span class="token comment"># cd /etc</span>
<span class="token punctuation">[</span>root@iZ2zebiempwqvoc2xead5lZ etc<span class="token punctuation">]</span><span class="token comment"># vim my.cnf</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 [mysqld] 区块下添加配置开启 binlog</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server-id<span class="token operator">=</span><span class="token number">1</span>	<span class="token comment">#master端的ID号【必须是唯一的】；</span>
<span class="token assign-left variable">log_bin</span><span class="token operator">=</span>mysql-bin	<span class="token comment">#同步的日志路径，一定注意这个目录要是mysql有权限写入的</span>
binlog-format<span class="token operator">=</span>row	<span class="token comment">#行级，记录每次操作后每行记录的变化。</span>
binlog-do-db<span class="token operator">=</span>cheetah	<span class="token comment">#指定库，缩小监控的范围。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 mysql：service mysqld restart，会发现在 /var/lib/mysql 下会生成两个文件 mysql-bin.000001 和 mysql-bin.index，当 mysql 重启或到达单个文件大小的阈值时，新生一个文件，按顺序编号 mysql-bin.000002，以此类推。</p><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3><p>binlog 日志有三种格式，可以通过 <code>binlog_format</code> 参数指定。</p><h4 id="statement" tabindex="-1"><a class="header-anchor" href="#statement" aria-hidden="true">#</a> statement</h4><p>记录的内容是 <strong>SQL语句</strong> 原文，比如执行一条 <code>update T set update_time=now() where id=1</code>，记录的内容如下</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df94429f23ff42be917f33b2614f81bc~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同步数据时，会执行记录的 SQL 语句，但是有个问题，update_time=now() 这里会获取当前<strong>系统时间</strong>，直接执行会导致与原库的数据<strong>不一致</strong>。</p><h4 id="row" tabindex="-1"><a class="header-anchor" href="#row" aria-hidden="true">#</a> row</h4><p>为了解决上述问题，我们需要指定为 row，记录的内容不再是简单的 SQL 语句了，还包含操作的具体数据，记录内容如下。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b8b24666a7d48f5a7314d0a243adda4~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>row 格式记录的内容看不到详细信息，要通过 mysql binlog 工具解析出来。</p><p><code>update_time=now()</code> 变成了具体的时间 <code>update_time=1627112756247</code>，条件后面的 @1、@2、@3 都是该行数据第1个~3个字段的原始值（假设这张表只有3个字段）。</p><p>这样就能保证同步数据的一致性，通常情况下都是指定为 row，这样可以为数据库的恢复与同步带来更好的可靠性。</p><p><strong>缺点：占空间、恢复与同步时消耗更多的IO资源，影响执行速度。</strong></p><h4 id="mixed" tabindex="-1"><a class="header-anchor" href="#mixed" aria-hidden="true">#</a> mixed</h4><p>MySQL 会判断这条 SQL 语句是否可能引起数据不一致，如果是，就用 row 格式，否则就用 statement 格式。</p><h3 id="配置权限" tabindex="-1"><a class="header-anchor" href="#配置权限" aria-hidden="true">#</a> 配置权限</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>CREATE <span class="token environment constant">USER</span> canal IDENTIFIED BY <span class="token string">&#39;XXXX&#39;</span><span class="token punctuation">;</span>   <span class="token comment">#创建用户名和密码都为 canal 的用户</span>
GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="token string">&#39;canal&#39;</span>@<span class="token string">&#39;%&#39;</span><span class="token punctuation">;</span> <span class="token comment">#授予该用户对所有数据库和表的查询、复制主节点数据的操作权限</span>
FLUSH PRIVILEGES<span class="token punctuation">;</span> <span class="token comment">#重新加载权限</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：如果密码设置的过于简单，会报以下错误</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ERROR <span class="token number">1819</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Your password does not satisfy the current policy requirements
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>MySQL 有密码设置的规范，可以自行百度😃。</p><h2 id="canal-配置" tabindex="-1"><a class="header-anchor" href="#canal-配置" aria-hidden="true">#</a> Canal 配置</h2>`,55),m={href:"https://github.com/alibaba/canal/releases",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"canal.deployer-1.1.6.tar.gz",-1),v=t(`<p>解压：<code>tar -zxvf canal.deployer-1.1.6.tar.gz</code></p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><p>通过查看 <code>conf/canal.properties</code> 配置，发现需要暴漏三个端口</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>canal.admin.port <span class="token operator">=</span> <span class="token number">11110</span>
canal.port <span class="token operator">=</span> <span class="token number">11111</span>
canal.metrics.pull.port <span class="token operator">=</span> <span class="token number">11112</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 <code>conf/canal.properties</code> 配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 指定实例,多个实例使用逗号分隔: canal.destinations = example1,example2</span>
canal.destinations = example
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 <code>conf/example/instance.properties</code> 实例配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 配置 slaveId 自定义,不等于 mysql 的 server Id 即可</span>
canal.instance.mysql.slaveId=10 

<span class="token comment"># 数据库地址:自己的数据库ip+端口</span>
canal.instance.master.address=127.0.0.1<span class="token punctuation">:</span><span class="token number">3306</span> 
 
<span class="token comment"># 数据库用户名和密码 </span>
canal.instance.dbUsername=xxx 
canal.instance.dbPassword=xxx

<span class="token comment">#代表数据库的编码方式对应到 java 中的编码类型，比如 UTF-8，GBK , ISO-8859-1</span>
canal.instance.connectionCharset = UTF<span class="token punctuation">-</span><span class="token number">8</span>
	
<span class="token comment"># 指定库和表，这里的 .* 表示 canal.instance.master.address 下面的所有数据库</span>
canal.instance.filter.regex=.<span class="token important">*\\\\..*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果系统是1个 cpu，需要将 <code>canal.instance.parser.parallel</code> 设置为 false</p></blockquote><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h3><p>需要在安装目录 <code>/usr/local</code> 下执行：<code>sh bin/startup.sh</code> 或者 <code>./bin/startup.sh</code>。</p><h4 id="报错" tabindex="-1"><a class="header-anchor" href="#报错" aria-hidden="true">#</a> 报错</h4><p>发现在 logs 下没有生成 canal.log 日志，在进程命令中 <code>ps -ef | grep canal</code> 也查不到 canal 的进程。</p><h4 id="解决" tabindex="-1"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> 解决</h4><p>在目录 logs 中存在文件 canal_stdout.log ，文件内容如下：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/363e715461cb4205a4d835436e75b9a2~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>报错信息提示内存不足，Java 运行时环境无法继续。更详细的错误日志在文件：<code>/usr/local/bin/hs_err_pid25186.log</code> 中。</p><p>既然是内存原因，那就检查一下自己的内存，执行命令<code>free -h</code> ，发现可用内存仅为 96M，应该是内存问题，解决方法如下：</p><ul><li>杀死运行的一些进程；</li><li>增加虚拟机的内存；</li><li>修改 canal 启动时所需要的内存；</li></ul>`,19),g={href:"http://startup.sh",target:"_blank",rel:"noopener noreferrer"},h=n("figure",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06ca55dfeae642c395c56fb95b1ad321~tplv-k3u1fbpfcp-zoom-1.image",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),f=n("p",null,[a("改为 "),n("code",null,"-server -Xms80m -Xmx80m -Xmn80m -XX:SurvivorRatio=2 -XX:PermSize=66m -XX:MaxPermSize=80m -Xss256k -XX:-UseAdaptiveSizePolicy -XX:MaxTenuringThreshold=15 -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSInitiatingOccupancyOnly -XX:+HeapDumpOnOutOfMemoryError")],-1),y=n("code",null,"found canal.pid , Please run stop.sh first ,then startup.sh ",-1),x={href:"http://xn--stop-ko8f1720a0mfgri.sh",target:"_blank",rel:"noopener noreferrer"},w=n("blockquote",null,[n("p",null,"这是由于 canal 服务不正常退出服务导致的，比如说虚拟机强制重启。")],-1),_={href:"http://stop.sh",target:"_blank",rel:"noopener noreferrer"},E=t(`<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5eae4666068417686bf05b4ef41ce72~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h3><div class="language-pom line-numbers-mode" data-ext="pom"><pre class="language-pom"><code>&lt;dependency&gt;
	&lt;groupId&gt;com.alibaba.otter&lt;/groupId&gt;
	&lt;artifactId&gt;canal.client&lt;/artifactId&gt;
	&lt;version&gt;1.1.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码样例" tabindex="-1"><a class="header-anchor" href="#代码样例" aria-hidden="true">#</a> 代码样例</h3><p>代码样例来自官网，仅用于测试使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCanalClientExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建链接：换成自己的数据库ip地址</span>
        <span class="token class-name">CanalConnector</span> connector <span class="token operator">=</span> <span class="token class-name">CanalConnectors</span><span class="token punctuation">.</span><span class="token function">newSingleConnector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span>
                <span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;example&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> batchSize <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> emptyCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            connector<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            connector<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;.*\\\\..*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            connector<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> totalEmptyCount <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>emptyCount <span class="token operator">&lt;</span> totalEmptyCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Message</span> message <span class="token operator">=</span> connector<span class="token punctuation">.</span><span class="token function">getWithoutAck</span><span class="token punctuation">(</span>batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取指定数量的数据</span>
                <span class="token keyword">long</span> batchId <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> size <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>batchId <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    emptyCount<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;empty count : &quot;</span> <span class="token operator">+</span> emptyCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    emptyCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token function">printEntry</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                connector<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>batchId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 提交确认</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;empty too many times, exit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            connector<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printEntry</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&gt;</span></span> entrys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>Entry</span> entry <span class="token operator">:</span> entrys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">CanalEntry<span class="token punctuation">.</span>EntryType</span><span class="token punctuation">.</span><span class="token constant">TRANSACTIONBEGIN</span> <span class="token operator">||</span> entry<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">CanalEntry<span class="token punctuation">.</span>EntryType</span><span class="token punctuation">.</span><span class="token constant">TRANSACTIONEND</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">CanalEntry<span class="token punctuation">.</span>RowChange</span> rowChage <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                rowChage <span class="token operator">=</span> <span class="token class-name">CanalEntry<span class="token punctuation">.</span>RowChange</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getStoreValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR ## parser of eromanga-event has an error , data:&quot;</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">CanalEntry<span class="token punctuation">.</span>EventType</span> eventType <span class="token operator">=</span> rowChage<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;================&amp;gt; binlog[%s:%s] , name[%s,%s] , eventType : %s&quot;</span><span class="token punctuation">,</span>
                    entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLogfileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLogfileOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSchemaName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    eventType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>RowData</span> rowData <span class="token operator">:</span> rowChage<span class="token punctuation">.</span><span class="token function">getRowDatasList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType <span class="token operator">==</span> <span class="token class-name">CanalEntry<span class="token punctuation">.</span>EventType</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getBeforeColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType <span class="token operator">==</span> <span class="token class-name">CanalEntry<span class="token punctuation">.</span>EventType</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getAfterColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------&amp;gt; before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getBeforeColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------&amp;gt; after&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">printColumn</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span><span class="token function">getAfterColumnsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printColumn</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>Column</span><span class="token punctuation">&gt;</span></span> columns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CanalEntry<span class="token punctuation">.</span>Column</span> column <span class="token operator">:</span> columns<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span> column<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;    update=&quot;</span> <span class="token operator">+</span> column<span class="token punctuation">.</span><span class="token function">getUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><p>启动项目，打印日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>empty count <span class="token builtin class-name">:</span> <span class="token number">1</span>
empty count <span class="token builtin class-name">:</span> <span class="token number">2</span>
empty count <span class="token builtin class-name">:</span> <span class="token number">3</span>
empty count <span class="token builtin class-name">:</span> <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>手动修改数据库中的字段：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> binlog<span class="token punctuation">[</span>mysql-bin.000002:8377<span class="token punctuation">]</span> , name<span class="token punctuation">[</span>cheetah,product_info<span class="token punctuation">]</span> , eventType <span class="token builtin class-name">:</span> UPDATE
-------<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> before
<span class="token function">id</span> <span class="token builtin class-name">:</span> <span class="token number">3</span>    <span class="token assign-left variable">update</span><span class="token operator">=</span>false
name <span class="token builtin class-name">:</span> java开发1    <span class="token assign-left variable">update</span><span class="token operator">=</span>false
price <span class="token builtin class-name">:</span> <span class="token number">87.0</span>    <span class="token assign-left variable">update</span><span class="token operator">=</span>false
create_date <span class="token builtin class-name">:</span> <span class="token number">2021</span>-03-27 <span class="token number">22</span>:43:31    <span class="token assign-left variable">update</span><span class="token operator">=</span>false
update_date <span class="token builtin class-name">:</span> <span class="token number">2021</span>-03-27 <span class="token number">22</span>:43:34    <span class="token assign-left variable">update</span><span class="token operator">=</span>false
-------<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> after
<span class="token function">id</span> <span class="token builtin class-name">:</span> <span class="token number">3</span>    <span class="token assign-left variable">update</span><span class="token operator">=</span>false
name <span class="token builtin class-name">:</span> java开发    <span class="token assign-left variable">update</span><span class="token operator">=</span>true
price <span class="token builtin class-name">:</span> <span class="token number">87.0</span>    <span class="token assign-left variable">update</span><span class="token operator">=</span>false
create_date <span class="token builtin class-name">:</span> <span class="token number">2021</span>-03-27 <span class="token number">22</span>:43:31    <span class="token assign-left variable">update</span><span class="token operator">=</span>false
update_date <span class="token builtin class-name">:</span> <span class="token number">2021</span>-03-27 <span class="token number">22</span>:43:34    <span class="token assign-left variable">update</span><span class="token operator">=</span>false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出是在 <code>mysql-bin.000002</code>文件中，数据库名称 cheetah ，表名 product_info，事件类型：update。</p><p>参考地址：</p>`,14),C={href:"https://www.cnblogs.com/caoweixiong/p/11824423.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://mp.weixin.qq.com/s/W-u9l_As2pLUMlSQFTckCQ",target:"_blank",rel:"noopener noreferrer"},S={href:"https://blog.csdn.net/weixin_45930241/article/details/123436694",target:"_blank",rel:"noopener noreferrer"};function z(L,T){const s=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[a("github地址："),n("a",r,[a("https://github.com/alibaba/canal"),e(s)])]),n("p",null,[a("完整wiki地址："),n("a",d,[a("https://github.com/alibaba/canal/wiki"),e(s)])]),k,n("p",null,[n("a",m,[a("官网下载地址"),e(s)]),a("，我下载的版本是 "),b,a("，然后通过 psftp 上传到服务器。")]),v,n("p",null,[a("我就是用的第三种方法，首先用 vim 打开 "),n("a",g,[a("startup.sh"),e(s)]),a(" 修改内存参数，可以对照我的进行修改，按照自己服务器剩余内存进行修改，这里我将内存调整到了 80M。")]),h,f,n("p",null,[a("改完之后执行命令发现依旧报错："),y,a(" 意思是找到了 canal.pid，"),n("a",x,[a("请先运行stop.sh"),e(s)]),a("。")]),w,n("p",null,[a("执行 "),n("a",_,[a("stop.sh"),e(s)]),a(" 命令后重新启动，成功运行，成功运行后可以在 canal/logs 文件夹中生成 canal.log 日志。")]),E,n("ul",null,[n("li",null,[n("a",C,[a("https://www.cnblogs.com/caoweixiong/p/11824423.html"),e(s)])]),n("li",null,[n("a",q,[a("https://mp.weixin.qq.com/s/W-u9l_As2pLUMlSQFTckCQ"),e(s)])]),n("li",null,[n("a",S,[a("https://blog.csdn.net/weixin_45930241/article/details/123436694"),e(s)])])])])}const j=p(i,[["render",z],["__file","Canal的原理、配置、实战.html.vue"]]);export{j as default};
