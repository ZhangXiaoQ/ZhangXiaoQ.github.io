import{_ as p,W as o,X as c,Y as n,Z as s,a0 as t,a2 as e,C as i}from"./framework-a9f5de78.js";const l={},u=n("figure",null,[n("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38ef8bd528c94f0ca09d48c852babc83~tplv-k3u1fbpfcp-zoom-1.image",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),d=n("p",null,"哈喽大家好，我是阿Q。",-1),r={href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDg2NjEzNA==&action=getalbum&album_id=1622755024437051392&scene=173&from_msgid=2247485252&from_itemidx=1&count=3&nolastread=1#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"源码",-1),v=n("code",null,"oauth2",-1),m=e('<h2 id="理论" tabindex="-1"><a class="header-anchor" href="#理论" aria-hidden="true">#</a> 理论</h2><p><code>OAuth</code>是一个关于授权（<code>authorization</code>）的开放网络标准，用来授权第三方应用获取用户数据，是目前最流行的授权机制，它当前的版本是2.0。</p><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><p>假如你正在“网站A”上冲浪，看到一篇帖子表示非常喜欢，当你情不自禁的想要点赞时，它会提示你进行登录操作。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e58bdce3e31c448b80910ef1cbdc1cbf~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>打开登录页面你会发现，除了最简单的账户密码登录外，还为我们提供了微博、微信、QQ等快捷登录方式。假设选择了快捷登录，它会提示我们扫码或者输入账号密码进行登录。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5c906ffa08349faa699f5897f57732e~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>登录成功之后便会将QQ/微信的昵称和头像等信息回填到“网站A”中，此时你就可以进行点赞操作了。</p><h3 id="名词定义" tabindex="-1"><a class="header-anchor" href="#名词定义" aria-hidden="true">#</a> 名词定义</h3><p>在详细讲解<code>oauth2</code>之前，我们先来了解一下它里边用到的名词定义吧：</p><ul><li>Client：客户端，它本身不会存储用户快捷登录的账号和密码，只是通过资源拥有者的授权去请求资源服务器的资源，即例子中的网站A；</li><li>Resource Owner：资源拥有者，通常是用户，即例子中拥有QQ/微信账号的用户；</li><li>Authorization Server：认证服务器，可以提供身份认证和用户授权的服务器，即给客户端颁发<code>token</code>和校验<code>token</code>；</li><li>Resource Server：资源服务器，存储用户资源的服务器，即例子中的QQ/微信存储的用户信息；</li></ul><h3 id="认证流程" tabindex="-1"><a class="header-anchor" href="#认证流程" aria-hidden="true">#</a> 认证流程</h3><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33b3e314120a421d8582563da807484c~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图是<code>oauth2</code>官网的认证流程图，我们来分析一下：</p><ul><li>A客户端向资源拥有者发送授权申请；</li><li>B资源拥有者同意客户端的授权，返回授权码；</li><li>C客户端使用授权码向认证服务器申请令牌<code>token</code>；</li><li>D认证服务器对客户端进行身份校验，认证通过后发放令牌；</li><li>E客户端拿着认证服务器颁发的令牌去资源服务器请求资源；</li><li>F资源服务器校验令牌的有效性，返回给客户端资源信息；</li></ul><p>为了大家更好的理解，阿Q特地画了一张图：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ca5889fddb64570874a2d743b4c478d~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到这儿，相信大家对理论知识已经掌握的差不多了，接下来我们就进入实战训练吧。</p><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><p>在正式开始搭建项目之前我们先来做一些准备工作：要想使用<code>oauth2</code>的服务，我们得先创建几张表。</p><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h3>',21),b=n("code",null,"oauth2",-1),g={href:"https://github.com/spring-attic/spring-security-oauth/blob/main/spring-security-oauth2/src/test/resources/schema.sql",target:"_blank",rel:"noopener noreferrer"},f=n("strong",null,"init.sql",-1),h=e(`<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69c6afdc807947b1a755070c91722ad2~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>至于表结构，大家可以先大体了解下，其中字段的含义，在<strong>init.sql</strong>文件中阿Q已经做了说明。</p><ul><li>oauth_client_details：存储客户端的配置信息，操作该表的类主要是<code>JdbcClientDetailsService.java</code>；</li><li>oauth_access_token：存储生成的令牌信息，操作该表的类主要是<code>JdbcTokenStore.java</code>；</li><li>oauth_client_token：在客户端系统中存储从服务端获取的令牌数据，操作该表的类主要是<code>JdbcClientDetailsService.java</code>；</li><li>oauth_code：存储授权码信息与认证信息，即只有<code>grant_type</code>为<code>authorization_code</code>时，该表才会有数据，操作该表的类主要是<code>JdbcAuthorizationCodeServices.java</code>；</li><li>oauth_approvals：存储用户的授权信息；</li><li>oauth_refresh_token：存储刷新令牌的<code>refresh_token</code>，如果客户端的<code>grant_type</code>不支持<code>refresh_token</code>，那么不会用到这张表，操作该表的类主要是<code>JdbcTokenStore</code>；</li></ul><p>在<code>oauth_client_details</code>表中添加一条数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>client_id<span class="token operator">:</span>cheetah_one	<span class="token comment">//客户端名称，必须唯一</span>
resource_ids<span class="token operator">:</span>product_api	<span class="token comment">//客户端所能访问的资源id集合,多个资源时用逗号(,)分隔</span>
client_secret<span class="token operator">:</span>$<span class="token number">2</span>a$<span class="token number">10</span>$h<span class="token operator">/</span><span class="token class-name">TmLPvXozJJHXDyJEN22ensJgaciomfpOc9js9OonwWIdAnRQeoi</span>	<span class="token comment">//客户端的访问密码</span>
scope<span class="token operator">:</span>read<span class="token punctuation">,</span>write	<span class="token comment">//客户端申请的权限范围,可选值包括read,write,trust。若有多个权限范围用逗号(,)分隔</span>
authorized_grant_types<span class="token operator">:</span>client_credentials<span class="token punctuation">,</span>implicit<span class="token punctuation">,</span>authorization_code<span class="token punctuation">,</span>refresh_token<span class="token punctuation">,</span>password	<span class="token comment">//指定客户端支持的grant_type,可选值包括authorization_code,password,refresh_token,implicit,client_credentials, 若支持多个grant_type用逗号(,)分隔</span>
web_server_redirect_uri<span class="token operator">:</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com	<span class="token comment">//客户端的重定向URI,可为空, 当grant_type为authorization_code或implicit时, 在Oauth的流程中会使用并检查与注册时填写的redirect_uri是否一致</span>
access_token_validity<span class="token operator">:</span><span class="token number">43200</span>	<span class="token comment">//设定客户端的access_token的有效时间值(单位:秒),可选, 若不设定值则使用默认的有效时间值(60 * 60 * 12, 12小时)</span>
autoapprove<span class="token operator">:</span><span class="token boolean">false</span>	<span class="token comment">//设置用户是否自动Approval操作, 默认值为 &#39;false&#39;, 可选值包括 &#39;true&#39;,&#39;false&#39;, &#39;read&#39;,&#39;write&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库中对密码进行了加密处理，大家可以在此路径下自行生成</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1cd00e436fc545198ddfc1a148c3d299~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>用户角色相关的表也在<strong>init.sql</strong>文件中，表结构非常简单，大家自行查阅。我的初始化数据为</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8845145ed440409aafd37bd06913b21b~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="依赖引入" tabindex="-1"><a class="header-anchor" href="#依赖引入" aria-hidden="true">#</a> 依赖引入</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于其它依赖，大家可以根据需要自行引入，不再赘述，回复“oauth2”获取源码。</p><h3 id="资源服务" tabindex="-1"><a class="header-anchor" href="#资源服务" aria-hidden="true">#</a> 资源服务</h3><p>配置文件对服务端口、应用名称、数据库、<code>mybatis</code>和日志进行了配置。</p><p>写了一个简单的控制层代码，用来模拟资源访问</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/product&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/findAll&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;产品列表查询成功&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着创建配置类继承<code>ResourceServerConfigurerAdapter</code>并增加<code>@EnableResourceServer</code>注解开启资源服务，重写两个<code>configure</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 指定token的持久化策略
 * InMemoryTokenStore 表示将token存储在内存中
 * RedisTokenStore 表示将token存储在redis中
 * JdbcTokenStore 表示将token存储在数据库中
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">jdbcTokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTokenStore</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 指定当前资源的id和token的存储策略
 * <span class="token keyword">@param</span> <span class="token parameter">resources</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ResourceServerSecurityConfigurer</span> resources<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">//此处的id可以写在配置文件中，这里我们先写死</span>
	resources<span class="token punctuation">.</span><span class="token function">resourceId</span><span class="token punctuation">(</span><span class="token string">&quot;product_api&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token function">jdbcTokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 设置请求权限和header处理
 * <span class="token keyword">@param</span> <span class="token parameter">http</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token comment">//固定写法</span>
	http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">//指定不同请求方式访问资源所需的权限，一般查询是read，其余都是write</span>
			<span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;#oauth2.hasScope(&#39;read&#39;)&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;#oauth2.hasScope(&#39;write&#39;)&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">PATCH</span><span class="token punctuation">,</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;#oauth2.hasScope(&#39;write&#39;)&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">,</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;#oauth2.hasScope(&#39;write&#39;)&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">,</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;#oauth2.hasScope(&#39;write&#39;)&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addHeaderWriter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
				<span class="token comment">//域名不同或者子域名不一样并且是ajax请求就会出现跨域问题</span>
				<span class="token comment">//允许跨域</span>
				response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">//跨域中会出现预检请求，如果不能通过，则真正请求也不会发出</span>
				<span class="token comment">//如果是跨域的预检请求，则原封不动向下传递请求头信息，否则预检请求会丢失请求头信息（主要是token信息）</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
					response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然我们也可以配置忽略校验的<code>url</code>，在上边的<code>public void configure(HttpSecurity http) throws Exception</code>中进行配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ExpressionUrlAuthorizationConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpSecurity</span><span class="token punctuation">&gt;</span></span>
		<span class="token punctuation">.</span>ExpressionInterceptUrlRegistry config <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">getUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
	config<span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们是需要进行校验的，所以我把对应的代码给注释掉了，大家可以回复“oauth2”下载源码自行查看。</p><p>然后将实现了<code>UserDetails</code>的<code>SysUser</code>和实现了<code>GrantedAuthority</code>的<code>SysRole</code>放到项目中，当请求发过来时，<code>oauth2</code>会帮我们自行校验。</p><h3 id="认证服务" tabindex="-1"><a class="header-anchor" href="#认证服务" aria-hidden="true">#</a> 认证服务</h3><p>配置文件对服务端口、应用名称、数据库、<code>mybatis</code>和日志进行了配置。</p><p><strong>Security配置</strong></p>`,25),y={href:"https://mp.weixin.qq.com/s/KKGShTtJ4ZNaQVoZvipJXg",target:"_blank",rel:"noopener noreferrer"},w=e(`<p>①将继承了<code>UserDetailsService</code>的<code>ISysUserService</code>的实现类<code>SysUserServiceImpl</code>重写<code>loadUserByUsername</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span><span class="token operator">::</span><span class="token function">getUsername</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②继承<code>WebSecurityConfigurerAdapter</code>类，增加<code>@EnableWebSecurity</code>注解并重写方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 指定认证对象的来源和加密方式
 * <span class="token keyword">@param</span> <span class="token parameter">auth</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 安全拦截机制（最重要）
 * <span class="token keyword">@param</span> <span class="token parameter">httpSecurity</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> httpSecurity<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	httpSecurity
			<span class="token comment">//CSRF禁用，因为不使用session</span>
			<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">//登录接口和静态资源不需要认证</span>
			<span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/login*&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/css/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">//除上面的所有请求全部需要认证通过才能访问</span>
			<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">//返回HttpSecurity以进行进一步的自定义,证明是一次新的配置的开始</span>
			<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">//如果未指定此页面，则会跳转到默认页面</span>
<span class="token comment">//                .loginPage(&quot;/login.html&quot;)</span>
			<span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">//认证失败处理类</span>
			<span class="token punctuation">.</span><span class="token function">failureHandler</span><span class="token punctuation">(</span>customAuthenticationFailureHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * AuthenticationManager 对象在OAuth2.0认证服务中要使用，提前放入IOC容器中
 * <span class="token keyword">@return</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>AuthorizationServer配置</strong></p><p>①继承<code>AuthorizationServerConfigurerAdapter</code>类，增加<code>@EnableAuthorizationServer</code>注解开启认证服务</p><p>②依赖注入，注入7个实例<code>Bean</code>对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 数据库连接池对象
 */</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 认证业务对象
 */</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ISysUserService</span> userService<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 授权码模式专用对象
 */</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 客户端信息来源
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">JdbcClientDetailsService</span> <span class="token function">jdbcClientDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcClientDetailsService</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * token保存策略
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTokenStore</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 授权信息保存策略
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">ApprovalStore</span> <span class="token function">approvalStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcApprovalStore</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 授权码模式数据来源
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">AuthorizationCodeServices</span> <span class="token function">authorizationCodeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcAuthorizationCodeServices</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③重写方法进行配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 用来配置客户端详情服务（ClientDetailsService）
 * 客户端详情信息在这里进行初始化
 * 指定客户端信息的数据库来源
 * <span class="token keyword">@param</span> <span class="token parameter">clients</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	clients<span class="token punctuation">.</span><span class="token function">withClientDetails</span><span class="token punctuation">(</span><span class="token function">jdbcClientDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 检测 token 的策略
 * <span class="token keyword">@param</span> <span class="token parameter">security</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerSecurityConfigurer</span> security<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	security
			<span class="token comment">//允许客户端以form表单的方式将token传达给我们</span>
			<span class="token punctuation">.</span><span class="token function">allowFormAuthenticationForClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">//检验token必须需要认证</span>
			<span class="token punctuation">.</span><span class="token function">checkTokenAccess</span><span class="token punctuation">(</span><span class="token string">&quot;isAuthenticated()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * OAuth2.0的主配置信息
 * <span class="token keyword">@param</span> <span class="token parameter">endpoints</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span> endpoints<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	endpoints
			<span class="token comment">//刷新token时会验证当前用户是否已经通过认证</span>
			<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">approvalStore</span><span class="token punctuation">(</span><span class="token function">approvalStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">authorizationCodeServices</span><span class="token punctuation">(</span><span class="token function">authorizationCodeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其它关于用户表和权限表的代码可参考源码，回复“oauth2”获取源码。</p><h2 id="模式" tabindex="-1"><a class="header-anchor" href="#模式" aria-hidden="true">#</a> 模式</h2><h3 id="授权码模式" tabindex="-1"><a class="header-anchor" href="#授权码模式" aria-hidden="true">#</a> 授权码模式</h3><p>我们前边所讲的内容都是基于授权码模式，授权码模式被称为最安全的一种模式，它获取令牌的操作是在两个服务端进行的，极大的减小了令牌泄漏的风险。</p><p>启动两个服务，当我们再次请求<code>127.0.0.1:9002/product/findAll</code>接口时会提示以下错误</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>{
    &quot;error&quot;: &quot;unauthorized&quot;,
    &quot;error_description&quot;: &quot;Full authentication is required to access this resource&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>①调用接口获取授权码</p><p>发送<code>127.0.0.1:9001/oauth/authorize?response_type=code&amp;client_id=cheetah_one</code>请求，前边的路径是固定形式的，<code>response_type=code</code>表示获取授权码，<code>client_id=cheetah_one</code>表示客户端的名称是我们数据库配置的数据。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af12af8291cc4bb399b467a7bc349ddf~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>该页面是<code>oauth2</code>的默认页面，输入用户的账户密码点击登录会提示我们进行授权，这是数据库<code>oauth_client_details</code>表我们设置<code>autoapprove</code>为<code>false</code>起到的效果。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb0b137bf086479aaf089e5987c74974~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>选择<code>Approve</code>点击<code>Authorize</code>按钮，会发现我们设置的回调地址（<code>oauth_client_details</code>表中的<code>web_server_redirect_uri</code>）后边拼接了<code>code</code>值，该值就是授权码。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4dbb8d0af5ac49dd8d126a753238699f~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查看数据库发现<code>oauth_approvals</code>和<code>oauth_code</code>表已经存入数据了。</p><p>拿着授权码去获取<code>token</code></p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/529c0ee0f0534baeba8e5cbf868b97d0~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>获取到<code>token</code>之后<code>oauth_access_token</code>和<code>oauth_refresh_token</code>表中会存入数据以用于后边的认证。而<code>oauth_code</code>表中的数据被清除了，这是因为<code>code</code>值是直接暴漏在网页链接上的，<code>oauth2</code>为了防止他人拿到<code>code</code>非法请求而特意设置为仅用一次。</p><p>拿着获取到的<code>token</code>去请求资源服务的接口，此时有两种请求方式</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcd7d2feef5f4d7c96e78f65bbf25689~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81a0ff9e5ed84484a43b9947a3ec5ed9~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"></p><p>接下来我们再来看一下<code>oauth2</code>的其它模式。</p><h3 id="简化模式" tabindex="-1"><a class="header-anchor" href="#简化模式" aria-hidden="true">#</a> 简化模式</h3><p>所谓简化模式是针对授权码模式进行的简化，它将授权码模式中获取授权码的步骤省略了，直接去请求获取<code>token</code>。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b12d1cfcb594b18957b58070ed405bb~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>流程：发送请求<code>127.0.0.1:9001/oauth/authorize?response_type=token&amp;client_id=cheetah_one</code>跳转到登录页进行登录，<code>response_type=token</code>表示获取<code>token</code>。</p><p>输入账号密码登录之后会直接在浏览器返回<code>token</code>，我们就可以像授权码方式一样携带<code>token</code>去请求资源了。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2726c2aafb814f03ad3af23560bf2ef0~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>该模式的弊端就是<code>token</code>直接暴漏在浏览器中，非常不安全，<strong>不建议使用</strong>。</p><h3 id="密码模式" tabindex="-1"><a class="header-anchor" href="#密码模式" aria-hidden="true">#</a> 密码模式</h3><p>密码模式下，用户需要将账户和密码提供给客户端向认证服务器申请令牌，所以该种模式需要用户高度信任客户端。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd2107c5cd594cc0a4eda823e8769eea~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>流程：请求如下</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2e75af649eb4f5d834262318924119b~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>获取成功之后可以去访问资源了。</p><h3 id="客户端模式" tabindex="-1"><a class="header-anchor" href="#客户端模式" aria-hidden="true">#</a> 客户端模式</h3><p>客户端模式已经不太属于<code>oauth2</code>的范畴了，用户直接在客户端进行注册，然后客户端去认证服务器获取令牌时不需要携带用户信息，完全脱离了用户，也就不存在授权问题了。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/653a029c274142148a18ba9a19f7e164~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>发送请求如下</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4bbbf1fb7fdb4be49865f239fb5ed531~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>获取成功之后可以去访问资源了。</p><h3 id="刷新token" tabindex="-1"><a class="header-anchor" href="#刷新token" aria-hidden="true">#</a> 刷新token</h3><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a95d042c1af4c8297159807e5c9a5cb~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="权限校验" tabindex="-1"><a class="header-anchor" href="#权限校验" aria-hidden="true">#</a> 权限校验</h3><p>除了我们在数据库中为客户端配置资源服务外，我们还可以动态的给用户分配接口的权限。</p><p>①开启<code>Security</code>内置的动态配置</p><p>在开启资源服务时给<code>ResourceServerConfig</code>类增加注解<code>@EnableGlobalMethodSecurity(securedEnabled = true,prePostEnabled = true)</code></p><p>②给接口增加权限</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/findAll&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Secured</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_PRODUCT&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;产品列表查询成功&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③在用户登录时设置用户权限</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>
	<span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span><span class="token operator">::</span><span class="token function">getUsername</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	sysUser<span class="token punctuation">.</span><span class="token function">setRoleList</span><span class="token punctuation">(</span><span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_PRODUCT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> sysUser<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后测试会发现可以正常访问。</p><h2 id="采坑" tabindex="-1"><a class="header-anchor" href="#采坑" aria-hidden="true">#</a> 采坑</h2><h3 id="包名问题" tabindex="-1"><a class="header-anchor" href="#包名问题" aria-hidden="true">#</a> 包名问题</h3><p>当我在创建项目的时候，给<code>product</code>和<code>server</code>两个模块设置了不同的包名，导致发送请求获取资源时报错。</p><p>经过分析得知，在登录账号时会将用户的信息存储到<code>oauth_access_token</code>表的<code>authentication</code>中，在进行<code>token</code>校验时会根据<code>token_id</code>取出该字段进行反序列化，如果此时发现包名不一致便会导致解析<code>token</code>失败，因此请求资源失败。</p><p><strong>解决思路</strong></p><ul><li>两个项目的包名改为一致；</li><li>可以将用户和权限的实体抽成单独的模块，供其它模块引用；</li><li><code>loadUserByUsername</code>方法中使用的用户实体类不需要继承<code>UserDetailsService</code>类，每次返回时用<code>user</code>类包装一下即可；</li></ul><h3 id="数据库问题" tabindex="-1"><a class="header-anchor" href="#数据库问题" aria-hidden="true">#</a> 数据库问题</h3><p>当我在进行权限校验测试时，在设置权限时发现少打了一个单词，导致请求一直出错。修改完成之后继续请求，仍提示权限不足。</p><p>于是我将数据库中<code>oauth_refresh_token</code>和<code>oauth_access_token</code>的数据清除，重新开始测试就可以了。</p><p>个人认为是生成<code>token</code>时发现数据库中<code>token</code>存在，故不刷新<code>token</code>，但进行校验时却用带有权限标识的<code>token</code>前去校验导致失败。</p><p>至于其它的小坑在这不再赘述，如果遇到问题，建议按照流程对比我的源码仔细检查，回复“oauth2”获取源码。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本文从原理、应用场景、认证流程出发，对<code>oauth2</code>进行了基本的讲解，并且手把手带大家完成了项目的搭建。大家在对授权码模式、简化模式、密码模式、客户端模式进行测试的同时要将重点放到授权码模式上。好了本文到这就结束了，希望对大家有所帮助。</p>`,73);function _(S,q){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,d,n("p",null,[s("对于身份认证和用户授权，之前写过几篇关于 "),n("a",r,[s("Shiro和Security的文章"),t(a)]),s("。从发送口令获取"),k,s("的反馈来看，大家还是比较认可的。今天给大家带来一种新的授权方式："),v,s("。")]),m,n("p",null,[b,s("相关的建表语句可以参考"),n("a",g,[s("官方初始化sql"),t(a)]),s("，也可以查看阿Q项目中的"),f,s("文件，回复“oauth2”获取源码。")]),h,n("p",null,[s("还是和之前"),n("a",y,[s("Security+JWT组合拳"),t(a)]),s("的配置大同小异，不了解的可以先看下该文。")]),w])}const j=p(l,[["render",_],["__file","oauth2 之理论-实战-模式-踩坑.html.vue"]]);export{j as default};
