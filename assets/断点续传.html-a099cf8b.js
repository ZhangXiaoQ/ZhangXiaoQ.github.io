import{_ as n,W as s,X as a,a2 as t}from"./framework-a9f5de78.js";const p={},e=t(`<p>各位看官大家好，今天给大家分享的又是一篇实战文章，希望大家能够喜欢。</p><h2 id="开味菜" tabindex="-1"><a class="header-anchor" href="#开味菜" aria-hidden="true">#</a> 开味菜</h2><p>最近接到一个新的需求，需要上传<code>2G</code>左右的视频文件，用测试环境的<code>OSS</code>试了一下，上传需要十几分钟，再考虑到公司的资源问题，果断放弃该方案。</p><p>一提到大文件上传，我最先想到的就是各种网盘了，现在大家都喜欢将自己收藏的<strong>小电影</strong>上传到网盘进行保存。网盘一般都支持断点续传和文件秒传功能，减少了网络波动和网络带宽对文件的限制，大大提高了用户体验，让人爱不释手。</p><p>说到这，大家先来了解一下这几个概念：</p><ul><li><strong>文件分块</strong>：将大文件拆分成小文件，将小文件上传\\下载，最后再将小文件组装成大文件；</li><li><strong>断点续传</strong>：在文件分块的基础上，将每个小文件采用单独的线程进行上传\\下载，如果碰到网络故障，可以从已经上传\\下载的部分开始继续上传\\下载未完成的部分，而没有必要从头开始上传\\下载；</li><li><strong>文件秒传</strong>：资源服务器中已经存在该文件，其他人上传时直接返回该文件的URI。</li></ul><h3 id="randomaccessfile" tabindex="-1"><a class="header-anchor" href="#randomaccessfile" aria-hidden="true">#</a> RandomAccessFile</h3><p>平时我们都会使用<code>FileInputStream</code>，<code>FileOutputStream</code>，<code>FileReader</code>以及<code>FileWriter</code>等<code>IO</code>流来读取文件，今天我们来了解一下<code>RandomAccessFile</code>。</p><p>它是一个直接继承<code>Object</code>的独立的类，底层实现中它实现的是<code>DataInput</code>和<code>DataOutput</code>接口。该类支持随机读取文件，随机访问文件类似于文件系统中存储的大字节数组。</p><p>它的实现基于<strong>文件指针</strong>（一种游标或者指向隐含数组的索引），文件指针可以通过<code>getFilePointer</code>方法读取，也可以通过<code>seek</code>方法设置。</p><p>输入时从文件指针开始读取字节，并使文件指针超过读取的字节，如果写入超过隐含数组当前结尾的输出操作会导致扩展数组。该类有四种模式可供选择：</p><ul><li>r： 以只读方式打开文件，如果执行写入操作会抛出<code>IOException</code>;</li><li>rw： 以读、写方式打开文件，如果文件不存在，则尝试创建文件；</li><li>rws： 以读、写方式打开文件，要求对文件内容或元数据的每次更新都同步写入底层存储设备；</li><li>rwd： 以读、写方式打开文件，要求对文件内容的每次更新都同步写入底层存储设备；</li></ul><p>在<code>rw</code>模式下，默认是使用<code>buffer</code>的，只有<code>cache</code>满的或者使用<code>RandomAccessFile.close()</code>关闭流的时候才真正的写到文件。</p><h4 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h4><p>1、<code>void seek(long pos)</code>：设置下一次读取或写入时的文件指针偏移量，通俗点说就是指定下次读文件数据的位置。</p><blockquote><p>偏移量可以设置在文件末尾之外，只有在偏移量设置超出文件末尾后，才能通过写入更改文件长度；</p></blockquote><p>2、<code>native long getFilePointer()</code>：返回当前文件的光标位置；</p><p>3、<code>native long length()</code>：返回当前文件的长度；</p><p>4、<strong>读</strong>方法</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0c223365a9c479cb99eaf6d2ade5176~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>5、<strong>写</strong>方法</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca7472538ceb4c759a49a53d2af14500~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>6、<code>readFully(byte[] b)</code>：这个方法的作用就是将文本中的内容填满这个缓冲区b。如果缓冲b不能被填满，那么读取流的过程将被阻塞，如果发现是流的结尾，那么会抛出异常；</p><p>7、<code>FileChannel getChannel()</code>：返回与此文件关联的唯一<code>FileChannel</code>对象；</p><p>8、<code>int skipBytes(int n)</code>：试图跳过n个字节的输入，丢弃跳过的字节；</p><blockquote><p><code>RandomAccessFile</code>的绝大多数功能，已经被<code>JDK1.4</code>的NIO的<strong>内存映射</strong>文件取代了，即把文件映射到内存后再操作，省去了频繁磁盘<code>io</code>。</p></blockquote><h2 id="主菜" tabindex="-1"><a class="header-anchor" href="#主菜" aria-hidden="true">#</a> 主菜</h2><p>总结经验，砥砺前行：之前的实战文章中过多的粘贴了源码，影响了各位小伙伴的阅读感受。经过大佬的点拨，以后将展示部分关键代码，供各位赏析，源码可在<strong>后台</strong>获取。</p><h3 id="文件分块" tabindex="-1"><a class="header-anchor" href="#文件分块" aria-hidden="true">#</a> 文件分块</h3><p>文件分块需要在前端进行处理，可以利用强大的<code>js</code>库或者现成的组件进行分块处理。需要确定分块的大小和分块的数量，然后为每一个分块指定一个索引值。</p><p>为了防止上传文件的分块与其它文件混淆，采用文件的<code>md5</code>值来进行区分，该值也可以用来校验服务器上是否存在该文件以及文件的上传状态。</p><ul><li>如果文件存在，直接返回文件地址；</li><li>如果文件不存在，但是有上传状态，即部分分块上传成功，则返回未上传的分块索引数组；</li><li>如果文件不存在，且上传状态为空，则所有分块均需要上传。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>fileRederInstance<span class="token punctuation">.</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
fileRederInstance<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    let fileBolb <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
    fileMD5 <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>fileBolb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;md5&quot;</span><span class="token punctuation">,</span> fileMD5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    axios
        <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>http <span class="token operator">+</span> <span class="token string">&quot;/fileUpload/checkFileMd5&quot;</span><span class="token punctuation">,</span> formData<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message <span class="token operator">==</span> <span class="token string">&quot;文件已存在&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//文件已存在不走后面分片了，直接返回文件地址到前台页面</span>
                success <span class="token operator">&amp;&amp;</span> <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">//文件不存在存在两种情况，一种是返回data：null代表未上传过 一种是data:[xx，xx] 还有哪几片未上传</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//还有几片未上传情况，断点续传</span>
                    chunkArr <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">readChunkMD5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用上传接口前，通过<code>slice</code>方法来取出索引在文件中对应位置的分块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getChunkInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> currentChunk<span class="token punctuation">,</span> chunkSize</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token comment">//获取对应下标下的文件片段</span>
       <span class="token keyword">let</span> start <span class="token operator">=</span> currentChunk <span class="token operator">*</span> chunkSize<span class="token punctuation">;</span>
       <span class="token keyword">let</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>size<span class="token punctuation">,</span> start <span class="token operator">+</span> chunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//对文件分块</span>
       <span class="token keyword">let</span> chunk <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> <span class="token punctuation">{</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> chunk <span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后调用上传接口完成上传。</p><h3 id="断点续传、文件秒传" tabindex="-1"><a class="header-anchor" href="#断点续传、文件秒传" aria-hidden="true">#</a> 断点续传、文件秒传</h3><p>后端基于<code>spring boot</code>开发，使用<code>redis</code>来存储上传文件的状态和上传文件的地址。</p><p>如果文件完整上传，返回文件路径；部分上传则返回未上传的分块数组；如果未上传过返回提示信息。</p><blockquote><p>在上传分块时会产生两个文件，一个是文件主体，一个是临时文件。临时文件可以看做是一个数组文件，为每一个分块分配一个值为127的字节。</p></blockquote><p>校验MD5值时会用到两个值：</p><ul><li>文件上传状态：只要该文件上传过就不为空，如果完整上传则为<code>true</code>，部分上传返回<code>false</code>；</li><li>文件上传地址：如果文件完整上传，返回文件路径；部分上传返回临时文件路径。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 校验文件的MD5
 **/</span>
<span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">checkFileMd5</span><span class="token punctuation">(</span><span class="token class-name">String</span> md5<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//文件是否上传状态：只要该文件上传过该值一定存在</span>
    <span class="token class-name">Object</span> processingObj <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">UploadConstants</span><span class="token punctuation">.</span><span class="token constant">FILE_UPLOAD_STATUS</span><span class="token punctuation">,</span> md5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>processingObj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">&quot;该文件没有上传过&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">boolean</span> processing <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>processingObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//完整文件上传完成时为文件的路径，如果未完成返回临时文件路径（临时文件相当于数组，为每个分块分配一个值为127的字节）</span>
    <span class="token class-name">String</span> value <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">UploadConstants</span><span class="token punctuation">.</span><span class="token constant">FILE_MD5_KEY</span> <span class="token operator">+</span> md5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//完整文件上传完成是true，未完成返回false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>processing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">&quot;文件已存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> confFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> completeList <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">readFileToByteArray</span><span class="token punctuation">(</span>confFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> missChunkList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> completeList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>completeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//用空格补齐</span>
                missChunkList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>missChunkList<span class="token punctuation">,</span><span class="token string">&quot;该文件上传了一部分&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说到这，你肯定会问：当这个文件的所有分块上传完成之后，该怎么得到完整的文件呢？接下来我们就说一下分块合并的问题。</p><h3 id="分块上传、文件合并" tabindex="-1"><a class="header-anchor" href="#分块上传、文件合并" aria-hidden="true">#</a> 分块上传、文件合并</h3><p>上边我们提到了利用文件的<code>md5</code>值来维护分块和文件的关系，因此我们会将具有相同<code>md5</code>值的分块进行合并，由于每个分块都有自己的索引值，所以我们会将分块按索引像插入数组一样分别插入文件中，形成完整的文件。</p><p>分块上传时，要和前端的分块大小、分块数量、当前分块索引等对应好，以备文件合并时使用，此处我们采用的是<strong>磁盘映射</strong>的方式来合并文件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//读操作和写操作都是允许的</span>
<span class="token class-name">RandomAccessFile</span> tempRaf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>tmpFile<span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//它返回的就是nio通信中的file的唯一channel</span>
<span class="token class-name">FileChannel</span> fileChannel <span class="token operator">=</span> tempRaf<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//写入该分片数据   分片大小 * 第几块分片获取偏移量</span>
<span class="token keyword">long</span> offset <span class="token operator">=</span> <span class="token constant">CHUNK_SIZE</span> <span class="token operator">*</span> multipartFileDTO<span class="token punctuation">.</span><span class="token function">getChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//分片文件大小</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileData <span class="token operator">=</span> multipartFileDTO<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将文件的区域直接映射到内存</span>
<span class="token class-name">MappedByteBuffer</span> mappedByteBuffer <span class="token operator">=</span> fileChannel<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">FileChannel<span class="token punctuation">.</span>MapMode</span><span class="token punctuation">.</span><span class="token constant">READ_WRITE</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> fileData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
mappedByteBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fileData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 释放</span>
<span class="token class-name">FileMD5Util</span><span class="token punctuation">.</span><span class="token function">freedMappedByteBuffer</span><span class="token punctuation">(</span>mappedByteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
fileChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每当完成一次分块的上传，还需要去检查文件的上传进度，看文件是否上传完成。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RandomAccessFile</span> accessConfFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>confFile<span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//把该分段标记为 true 表示完成</span>
accessConfFile<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>multipartFileDTO<span class="token punctuation">.</span><span class="token function">getChunks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
accessConfFile<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>multipartFileDTO<span class="token punctuation">.</span><span class="token function">getChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
accessConfFile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//completeList 检查是否全部完成,如果数组里是否全部都是(全部分片都成功上传)</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> completeList <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">readFileToByteArray</span><span class="token punctuation">(</span>confFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> isComplete <span class="token operator">=</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> completeList<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> isComplete <span class="token operator">==</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//与运算, 如果有部分没有完成则 isComplete 不是 Byte.MAX_VALUE</span>
    isComplete <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>isComplete <span class="token operator">&amp;</span> completeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
accessConfFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后更新文件的上传进度到<code>Redis</code>中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//更新redis中的状态：如果是true的话证明是已经该大文件全部上传完成</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isComplete <span class="token operator">==</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">UploadConstants</span><span class="token punctuation">.</span><span class="token constant">FILE_UPLOAD_STATUS</span><span class="token punctuation">,</span> multipartFileDTO<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">UploadConstants</span><span class="token punctuation">.</span><span class="token constant">FILE_MD5_KEY</span> <span class="token operator">+</span> multipartFileDTO<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uploadDirPath <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">UploadConstants</span><span class="token punctuation">.</span><span class="token constant">FILE_UPLOAD_STATUS</span><span class="token punctuation">,</span> multipartFileDTO<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">UploadConstants</span><span class="token punctuation">.</span><span class="token constant">FILE_UPLOAD_STATUS</span><span class="token punctuation">,</span> multipartFileDTO<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">UploadConstants</span><span class="token punctuation">.</span><span class="token constant">FILE_MD5_KEY</span> <span class="token operator">+</span> multipartFileDTO<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">UploadConstants</span><span class="token punctuation">.</span><span class="token constant">FILE_MD5_KEY</span> <span class="token operator">+</span> multipartFileDTO<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uploadDirPath <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">&quot;.conf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>回复<code>break</code>可获取完整源码呦！</p></blockquote>`,53),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","断点续传.html.vue"]]);export{k as default};
